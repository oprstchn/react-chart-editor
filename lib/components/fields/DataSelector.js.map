{"version":3,"sources":["../../../src/components/fields/DataSelector.js"],"names":["attributeIsData","meta","valType","arrayOk","UnconnectedDataSelector","props","context","updatePlot","bind","setLocals","nextProps","nextContext","dataSources","dataSourceOptions","srcAttr","attr","srcProperty","container","get","fullValue","srcConverters","toSrc","type","is2D","includes","Array","isArray","hasData","value","updateContainer","update","data","filter","v","map","fromSrc","label","newLabel","traceType","dataSourceOptionRenderer","dataSourceValueRenderer","length","Component","propTypes","PropTypes","any","func","object","Field","contextTypes","array","shape","isRequired","modifyPlotProps","plotProps","attrMeta","TRANSFORMS_LIST","indexOf","isVisible"],"mappings":"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","file":"DataSelector.js","sourcesContent":["import DropdownWidget from '../widgets/Dropdown';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport Field from './Field';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {connectToContainer, maybeAdjustSrc, maybeTransposeData} from 'lib';\nimport {TRANSFORMS_LIST} from 'lib/constants';\n\nexport function attributeIsData(meta = {}) {\n  return meta.valType === 'data_array' || meta.arrayOk;\n}\n\nexport class UnconnectedDataSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.updatePlot = this.updatePlot.bind(this);\n    this.setLocals(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(props, context) {\n    this.dataSources = context.dataSources || {};\n    this.dataSourceOptions = context.dataSourceOptions || [];\n\n    this.srcAttr = props.attr + 'src';\n    this.srcProperty = nestedProperty(props.container, this.srcAttr).get();\n    this.fullValue = this.context.srcConverters\n      ? this.context.srcConverters.toSrc(this.srcProperty, props.container.type)\n      : this.srcProperty;\n\n    this.is2D = false;\n    if (props.container) {\n      this.is2D =\n        (props.attr === 'z' &&\n          [\n            'contour',\n            'contourgl',\n            'heatmap',\n            'heatmapgl',\n            'surface',\n            'carpet',\n            'contourcarpet',\n          ].includes(props.container.type)) ||\n        (props.container.type === 'table' && props.attr !== 'columnorder') ||\n        Array.isArray(this.fullValue);\n    }\n\n    this.hasData = props.container ? props.attr in props.container : false;\n  }\n\n  updatePlot(value) {\n    if (!this.props.updateContainer) {\n      return;\n    }\n\n    const update = {};\n    let data;\n\n    if (Array.isArray(value)) {\n      data = value.filter(v => Array.isArray(this.dataSources[v])).map(v => this.dataSources[v]);\n    } else {\n      data = this.dataSources[value] || null;\n    }\n\n    update[this.props.attr] = maybeTransposeData(data, this.srcAttr, this.props.container.type);\n    update[this.srcAttr] = maybeAdjustSrc(value, this.srcAttr, this.props.container.type, {\n      fromSrc: this.context.srcConverters ? this.context.srcConverters.fromSrc : null,\n    });\n\n    this.props.updateContainer(update);\n  }\n\n  render() {\n    const {label} = this.props;\n    let newLabel;\n    if (typeof label === 'object') {\n      const traceType = this.props.container.type;\n      if (label[traceType]) {\n        newLabel = label[traceType];\n      } else {\n        newLabel = label['*'];\n      }\n    } else {\n      newLabel = label;\n    }\n\n    return (\n      <Field {...{...this.props, label: newLabel}}>\n        <DropdownWidget\n          options={this.dataSourceOptions}\n          value={this.fullValue}\n          onChange={this.updatePlot}\n          multi={this.is2D}\n          searchable={true}\n          optionRenderer={this.context.dataSourceOptionRenderer}\n          valueRenderer={this.context.dataSourceValueRenderer}\n          clearable={true}\n          placeholder={this.hasData ? 'Data inlined in figure' : 'Choose data...'}\n          disabled={this.dataSourceOptions.length === 0}\n        />\n      </Field>\n    );\n  }\n}\n\nUnconnectedDataSelector.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  container: PropTypes.object,\n  ...Field.propTypes,\n};\n\nUnconnectedDataSelector.contextTypes = {\n  dataSources: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n  dataSourceValueRenderer: PropTypes.func,\n  dataSourceOptionRenderer: PropTypes.func,\n  srcConverters: PropTypes.shape({\n    toSrc: PropTypes.func.isRequired,\n    fromSrc: PropTypes.func.isRequired,\n  }),\n  container: PropTypes.object,\n};\n\nfunction modifyPlotProps(props, context, plotProps) {\n  if (\n    attributeIsData(plotProps.attrMeta) &&\n    (context.container && TRANSFORMS_LIST.indexOf(context.container.type) === -1)\n  ) {\n    plotProps.isVisible = true;\n  }\n}\n\nexport default connectToContainer(UnconnectedDataSelector, {modifyPlotProps});\n"]}