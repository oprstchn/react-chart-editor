{"version":3,"sources":["../../../src/components/fields/AxesSelector.js"],"names":["AxesSelector","props","context","_","localize","axesTargetHandler","Error","axesTarget","fullLayout","axesOptions","maxCharsThatFitInRadio","maxOptions","length","multipleSublots","_subplots","Object","values","some","s","options","map","option","value","label","title","totalCharsInOptions","o","reduce","acc","Component","contextTypes","PropTypes","func","string","object","propTypes","array"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,Y;;;AACJ,wBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,4HACpBD,KADoB,EACbC,OADa;;AAAA,QAETC,CAFS,GAEJD,OAFI,CAEnBE,QAFmB;;;AAI1B,QAAI,CAACF,QAAQG,iBAAb,EAAgC;AAC9B,YAAM,IAAIC,KAAJ,CAAUH,EAAE,kEAAF,CAAV,CAAN;AACD;AANyB;AAO3B;;;;6BAEQ;AAAA,qBAC0D,KAAKD,OAD/D;AAAA,UACAG,iBADA,YACAA,iBADA;AAAA,UACmBE,UADnB,YACmBA,UADnB;AAAA,UAC+BC,UAD/B,YAC+BA,UAD/B;AAAA,UACqDL,CADrD,YAC2CC,QAD3C;AAAA,UAEAK,WAFA,GAEe,KAAKR,KAFpB,CAEAQ,WAFA;;AAGP,UAAMC,yBAAyB,EAA/B;AACA,UAAMC,aAAaF,YAAYG,MAAZ,GAAqB,CAAxC,CAJO,CAIoC;;AAE3C,UAAMC,kBACJL,cACAA,WAAWM,SADX,IAEAC,OAAOC,MAAP,CAAcR,WAAWM,SAAzB,EAAoCG,IAApC,CAAyC;AAAA,eAAKC,EAAEN,MAAF,GAAW,CAAhB;AAAA,OAAzC,CAHF;;AAKA,UAAMO,UAAUN,kBACZJ,YAAYW,GAAZ,CACE;AAAA,eACEC,OAAOC,KAAP,KAAiB,SAAjB,GACID,MADJ,GAEI;AACEE,iBAAOF,OAAOG,KADhB;AAEEF,iBAAOD,OAAOC;AAFhB,SAHN;AAAA,OADF,CADY,GAUZb,WAVJ;;AAYA,UAAMgB,sBACHN,WAAWA,QAAQC,GAAR,CAAY;AAAA,eAAKM,EAAEH,KAAP;AAAA,OAAZ,EAA0BI,MAA1B,CAAiC,UAACC,GAAD,EAAMF,CAAN;AAAA,eAAYE,MAAMF,EAAEd,MAApB;AAAA,OAAjC,EAA6D,CAA7D,CAAZ,IAAgF,CADlF;;AAGA,aAAOD,cAAcc,uBAAuBf,sBAArC,GACL;AAAC,uBAAD;AAAA,qBAAW,KAAKT,KAAhB,IAAuB,OAAOE,EAAE,eAAF,CAA9B;AACE,sCAAC,kBAAD;AACE,mBAASgB,OADX;AAEE,iBAAOZ,UAFT;AAGE,oBAAUF,iBAHZ;AAIE,qBAAW;AAJb;AADF,OADK,GAUL;AAAC,uBAAD;AAAA,qBAAW,KAAKJ,KAAhB,IAAuB,YAAvB;AACE,sCAAC,qBAAD;AACE,mBAASkB,OADX;AAEE,wBAAcZ,UAFhB;AAGE,0BAAgBF;AAHlB;AADF,OAVF;AAkBD;;;;EAtDwBwB,gB;;AAyD3B7B,aAAa8B,YAAb,GAA4B;AAC1BzB,qBAAmB0B,oBAAUC,IADH;AAE1BzB,cAAYwB,oBAAUE,MAFI;AAG1BzB,cAAYuB,oBAAUG,MAHI;AAI1B9B,YAAU2B,oBAAUC;AAJM,CAA5B;;AAOAhC,aAAamC,SAAb,GAAyB;AACvB1B,eAAasB,oBAAUK;AADA,CAAzB;;kBAIepC,Y","file":"AxesSelector.js","sourcesContent":["import Field from './Field';\nimport PropTypes from 'prop-types';\nimport Dropdown from '../widgets/Dropdown';\nimport RadioBlocks from '../widgets/RadioBlocks';\nimport React, {Component} from 'react';\n\nclass AxesSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n    const {localize: _} = context;\n\n    if (!context.axesTargetHandler) {\n      throw new Error(_('AxesSelector must be nested within a connectAxesToPlot component'));\n    }\n  }\n\n  render() {\n    const {axesTargetHandler, axesTarget, fullLayout, localize: _} = this.context;\n    const {axesOptions} = this.props;\n    const maxCharsThatFitInRadio = 27;\n    const maxOptions = axesOptions.length > 4; // eslint-disable-line\n\n    const multipleSublots =\n      fullLayout &&\n      fullLayout._subplots &&\n      Object.values(fullLayout._subplots).some(s => s.length > 1);\n\n    const options = multipleSublots\n      ? axesOptions.map(\n          option =>\n            option.value === 'allaxes'\n              ? option\n              : {\n                  label: option.title,\n                  value: option.value,\n                }\n        )\n      : axesOptions;\n\n    const totalCharsInOptions =\n      (options && options.map(o => o.label).reduce((acc, o) => acc + o.length, 0)) || 0;\n\n    return maxOptions || totalCharsInOptions >= maxCharsThatFitInRadio ? (\n      <Field {...this.props} label={_('Axis to Style')}>\n        <Dropdown\n          options={options}\n          value={axesTarget}\n          onChange={axesTargetHandler}\n          clearable={false}\n        />\n      </Field>\n    ) : (\n      <Field {...this.props} center>\n        <RadioBlocks\n          options={options}\n          activeOption={axesTarget}\n          onOptionChange={axesTargetHandler}\n        />\n      </Field>\n    );\n  }\n}\n\nAxesSelector.contextTypes = {\n  axesTargetHandler: PropTypes.func,\n  axesTarget: PropTypes.string,\n  fullLayout: PropTypes.object,\n  localize: PropTypes.func,\n};\n\nAxesSelector.propTypes = {\n  axesOptions: PropTypes.array,\n};\n\nexport default AxesSelector;\n"]}