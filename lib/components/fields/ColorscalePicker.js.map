{"version":3,"sources":["../../../src/components/fields/ColorscalePicker.js"],"names":["UnconnectedColorscalePicker","props","onUpdate","bind","colorscale","colorscaleType","Array","isArray","updatePlot","map","c","i","step","length","fullValue","v","initialCategory","Component","propTypes","PropTypes","any","func","string","Field","contextTypes","container","object","graphDiv"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEaA,2B,WAAAA,2B;;;AACX,uCAAYC,KAAZ,EAAmB;AAAA;;AAAA,0JACXA,KADW;;AAEjB,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AAFiB;AAGlB;;;;6BAEQC,U,EAAYC,c,EAAgB;AACnC,UAAIC,MAAMC,OAAN,CAAcH,UAAd,CAAJ,EAA+B;AAC7B,aAAKH,KAAL,CAAWO,UAAX,CACEJ,WAAWK,GAAX,CAAe,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACvB,cAAIC,OAAOD,KAAKP,WAAWS,MAAX,GAAoB,CAAzB,CAAX;AACA,cAAIF,MAAM,CAAV,EAAa;AACXC,mBAAO,CAAP;AACD;AACD,iBAAO,CAACA,IAAD,EAAOF,CAAP,CAAP;AACD,SAND,CADF,EAQEL,cARF;AAUD;AACF;;;6BAEQ;AAAA,UACAS,SADA,GACa,KAAKb,KADlB,CACAa,SADA;;AAEP,UAAMV,aAAaE,MAAMC,OAAN,CAAcO,SAAd,IAA2BA,UAAUL,GAAV,CAAc;AAAA,eAAKM,EAAE,CAAF,CAAL;AAAA,OAAd,CAA3B,GAAsD,IAAzE;;AAEA,aACE;AAAC,uBAAD;AAAW,aAAKd,KAAhB;AACE,sCAAC,0BAAD;AACE,oBAAUG,UADZ;AAEE,8BAAoB,KAAKF,QAF3B;AAGE,2BAAiB,KAAKD,KAAL,CAAWe;AAH9B;AADF,OADF;AASD;;;;EAlC8CC,gB;;AAqCjDjB,4BAA4BkB,SAA5B;AACEJ,aAAWK,oBAAUC,GADvB;AAEEZ,cAAYW,oBAAUE,IAFxB;AAGEL,mBAAiBG,oBAAUG;AAH7B,GAIKC,gBAAML,SAJX;;AAOAlB,4BAA4BwB,YAA5B,GAA2C;AACzCC,aAAWN,oBAAUO,MADoB;AAEzCC,YAAUR,oBAAUO;AAFqB,CAA3C;;kBAKe,6BAAmB1B,2BAAnB,C","file":"ColorscalePicker.js","sourcesContent":["import ColorscalePickerWidget from '../widgets/ColorscalePicker';\nimport Field from './Field';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectToContainer} from 'lib';\n\nexport class UnconnectedColorscalePicker extends Component {\n  constructor(props) {\n    super(props);\n    this.onUpdate = this.onUpdate.bind(this);\n  }\n\n  onUpdate(colorscale, colorscaleType) {\n    if (Array.isArray(colorscale)) {\n      this.props.updatePlot(\n        colorscale.map((c, i) => {\n          let step = i / (colorscale.length - 1);\n          if (i === 0) {\n            step = 0;\n          }\n          return [step, c];\n        }),\n        colorscaleType\n      );\n    }\n  }\n\n  render() {\n    const {fullValue} = this.props;\n    const colorscale = Array.isArray(fullValue) ? fullValue.map(v => v[1]) : null;\n\n    return (\n      <Field {...this.props}>\n        <ColorscalePickerWidget\n          selected={colorscale}\n          onColorscaleChange={this.onUpdate}\n          initialCategory={this.props.initialCategory}\n        />\n      </Field>\n    );\n  }\n}\n\nUnconnectedColorscalePicker.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  initialCategory: PropTypes.string,\n  ...Field.propTypes,\n};\n\nUnconnectedColorscalePicker.contextTypes = {\n  container: PropTypes.object,\n  graphDiv: PropTypes.object,\n};\n\nexport default connectToContainer(UnconnectedColorscalePicker);\n"]}