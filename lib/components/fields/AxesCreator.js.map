{"version":3,"sources":["../../../src/components/fields/AxesCreator.js"],"names":["UnconnectedAxisCreator","currentAxisId","props","fullContainer","attr","currentTraceIndex","index","context","fullData","some","d","updateContainer","onUpdate","subplots","fullLayout","_subplots","lastAxisNumber","Number","length","charAt","side","type","EDITOR_ACTIONS","UPDATE_LAYOUT","payload","update","axesToBeGarbageCollected","trace","push","UPDATE_TRACES","traceIndexes","icon","extraComponent","canAddAxis","addAndUpdateAxis","label","options","updateAxis","u","Component","propTypes","PropTypes","string","array","container","object","func","contextType","EditorControlsContext","AxisCreator","UnconnectedAxesCreator","axisType","isFirstTraceOfAxisType","data","filter","_","localize","controls","getOptions","map","axisId","value","forEach","toUpperCase","setPanel","modifyPlotProps","plotProps","isVisible"],"mappings":"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","file":"AxesCreator.js","sourcesContent":["import Dropdown from './Dropdown';\nimport Info from './Info';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport Button from '../widgets/Button';\nimport {PlusIcon} from 'plotly-icons';\nimport {connectToContainer, traceTypeToAxisType, getAxisTitle, axisIdToAxisName} from 'lib';\nimport {PlotlySection} from 'components';\nimport {EditorControlsContext, ModalProviderContext} from '../../context';\n\nclass UnconnectedAxisCreator extends Component {\n  canAddAxis() {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n    const currentTraceIndex = this.props.fullContainer.index;\n    return this.context.fullData.some(\n      d => d.index !== currentTraceIndex && d[this.props.attr] === currentAxisId\n    );\n  }\n\n  addAndUpdateAxis() {\n    const {attr, updateContainer} = this.props;\n    const {\n      onUpdate,\n      fullLayout: {_subplots: subplots},\n    } = this.context;\n    const lastAxisNumber = Number(subplots[attr][subplots[attr].length - 1].charAt(1)) || 1;\n\n    updateContainer({\n      [attr]: attr.charAt(0) + (lastAxisNumber + 1),\n    });\n\n    let side = null;\n    if (attr === 'yaxis') {\n      side = 'right';\n    } else if (attr === 'xaxis') {\n      side = 'top';\n    }\n\n    onUpdate({\n      type: EDITOR_ACTIONS.UPDATE_LAYOUT,\n      payload: {\n        update: {\n          [`${attr + (lastAxisNumber + 1)}.side`]: side,\n          [`${attr + (lastAxisNumber + 1)}.overlaying`]: !(attr === 'yaxis' || attr === 'xaxis')\n            ? null\n            : subplots[attr][subplots[attr].length - 1],\n        },\n      },\n    });\n  }\n\n  updateAxis(update) {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n    const axesToBeGarbageCollected = [];\n\n    // When we select another axis, make sure no unused axes are left\n    if (\n      currentAxisId !== update &&\n      !this.context.fullData.some(\n        trace =>\n          trace[this.props.attr] === currentAxisId && trace.index !== this.props.fullContainer.index\n      )\n    ) {\n      axesToBeGarbageCollected.push(currentAxisId);\n    }\n\n    this.context.onUpdate({\n      type: EDITOR_ACTIONS.UPDATE_TRACES,\n      payload: {\n        axesToBeGarbageCollected,\n        update: {[this.props.attr]: update},\n        traceIndexes: [this.props.fullContainer.index],\n      },\n    });\n  }\n\n  render() {\n    const icon = <PlusIcon />;\n    const extraComponent = this.canAddAxis() ? (\n      <Button variant=\"no-text\" icon={icon} onClick={() => this.addAndUpdateAxis()} />\n    ) : (\n      <Button variant=\"no-text--disabled\" icon={icon} onClick={() => {}} />\n    );\n\n    return (\n      <Dropdown\n        label={this.props.label}\n        attr={this.props.attr}\n        clearable={false}\n        options={this.props.options}\n        updatePlot={u => this.updateAxis(u)}\n        extraComponent={extraComponent}\n      />\n    );\n  }\n}\n\nUnconnectedAxisCreator.propTypes = {\n  attr: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.array,\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n  updateContainer: PropTypes.func,\n};\n\nUnconnectedAxisCreator.contextType = EditorControlsContext;\n\nconst AxisCreator = connectToContainer(UnconnectedAxisCreator);\n\nclass UnconnectedAxesCreator extends Component {\n  render() {\n    const axisType = traceTypeToAxisType(this.props.container.type);\n    const isFirstTraceOfAxisType =\n      this.context.data.filter(d => traceTypeToAxisType(d.type) === axisType).length === 1;\n\n    if (isFirstTraceOfAxisType) {\n      return null;\n    }\n\n    const {fullLayout, localize: _} = this.context;\n    const controls = [];\n\n    function getOptions(axisType) {\n      return fullLayout._subplots[axisType].map(axisId => ({\n        label: getAxisTitle(fullLayout[axisIdToAxisName(axisId)]),\n        value: axisId,\n      }));\n    }\n\n    if (axisType === 'cartesian') {\n      ['xaxis', 'yaxis'].forEach((type, index) => {\n        controls.push(\n          <AxisCreator\n            key={index}\n            attr={type}\n            label={type.charAt(0).toUpperCase() + _(' Axis')}\n            options={getOptions(type)}\n          />\n        );\n      });\n    }\n\n    return (\n      <PlotlySection name={_('Axes to Use')}>\n        {controls}\n        <ModalProviderContext.Consumer>\n          {({setPanel}) => (\n            <Info>\n              {_('You can style and position your axes in the ')}\n              <a onClick={() => setPanel('Structure', 'Subplots')}>{_('Subplots')}</a>\n              {_(' panel.')}\n            </Info>\n          )}\n        </ModalProviderContext.Consumer>\n      </PlotlySection>\n    );\n  }\n}\n\nUnconnectedAxesCreator.propTypes = {\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n};\n\nUnconnectedAxesCreator.contextType = EditorControlsContext;\n\nexport default connectToContainer(UnconnectedAxesCreator, {\n  modifyPlotProps: (props, context, plotProps) => {\n    const {data} = context;\n    const {fullContainer} = plotProps;\n\n    plotProps.isVisible =\n      data.length > 1 &&\n      data[fullContainer.index] &&\n      traceTypeToAxisType(data[fullContainer.index].type) === 'cartesian';\n  },\n});\n"]}