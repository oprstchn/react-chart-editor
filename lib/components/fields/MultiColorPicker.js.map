{"version":3,"sources":["../../../src/components/fields/MultiColorPicker.js"],"names":["CustomColorscalePicker","UnconnectedColorscalePicker","modifyPlotProps","props","context","plotProps","attr","fullData","filter","traceIndexes","includes","t","index","every","marker","color","fullValue","map","UnconnectedMultiColorPicker","state","selectedConstantColorOption","length","v","setColor","bind","setColors","updatePlot","colorscale","colorscaleType","numberOfTraces","tracesToColor","colors","c","adjustedColors","repeat","updates","updateContainer","_","localize","constantOptions","label","value","parentSelectedConstantColorOption","multiMessage","multiColorMessage","singleMessage","singleColorMessage","onConstantColorOptionChange","setState","Component","propTypes","PropTypes","string","func","messageKeyWordSingle","messageKeyWordPlural","array","Field","contextTypes","isVisible","dedupedTraceIndexes","forEach","i","push","traces","trace","traceIndex","concat","get"],"mappings":"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","file":"MultiColorPicker.js","sourcesContent":["import ColorPicker from './ColorPicker';\nimport {UnconnectedColorscalePicker} from './ColorscalePicker';\nimport Field from './Field';\nimport Info from './Info';\nimport PropTypes from 'prop-types';\nimport RadioBlocks from '../widgets/RadioBlocks';\nimport React, {Component} from 'react';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {adjustColorscale, connectToContainer} from 'lib';\n\nconst CustomColorscalePicker = connectToContainer(UnconnectedColorscalePicker, {\n  modifyPlotProps: (props, context, plotProps) => {\n    if (\n      props.attr === 'marker.color' &&\n      context.fullData\n        .filter(t => context.traceIndexes.includes(t.index))\n        .every(t => t.marker && t.marker.color) &&\n      (plotProps.fullValue && typeof plotProps.fullValue === 'string')\n    ) {\n      plotProps.fullValue =\n        context.fullData &&\n        context.fullData\n          .filter(t => context.traceIndexes.includes(t.index))\n          .map(t => [0, t.marker.color]);\n    }\n  },\n});\n\nclass UnconnectedMultiColorPicker extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      selectedConstantColorOption:\n        context.traceIndexes.length > 1 &&\n        props.fullValue &&\n        props.fullValue.every(v => v[1] === props.fullValue[0][1])\n          ? 'single'\n          : 'multiple',\n    };\n    this.setColor = this.setColor.bind(this);\n    this.setColors = this.setColors.bind(this);\n  }\n\n  setColor(color) {\n    if (this.props.setColor) {\n      this.props.setColor(color);\n    } else {\n      this.props.updatePlot(color);\n    }\n  }\n\n  setColors(colorscale, colorscaleType) {\n    const numberOfTraces = this.props.tracesToColor.length;\n    const colors = colorscale.map(c => c[1]);\n\n    let adjustedColors = colors;\n\n    if (colorscaleType !== 'categorical') {\n      adjustedColors = adjustColorscale(colors, numberOfTraces, colorscaleType);\n    }\n\n    if (adjustedColors.every(c => c === adjustedColors[0]) || colorscaleType === 'categorical') {\n      adjustedColors = adjustColorscale(colors, numberOfTraces, colorscaleType, {repeat: true});\n    }\n\n    const updates = adjustedColors.map(color => ({\n      [this.props.attr]: color,\n    }));\n\n    this.context.updateContainer(updates);\n  }\n\n  render() {\n    const _ = this.context.localize;\n    const constantOptions = [\n      {label: _('Single'), value: 'single'},\n      {label: _('Multiple'), value: 'multiple'},\n    ];\n    const selectedConstantColorOption = this.props.parentSelectedConstantColorOption\n      ? this.props.parentSelectedConstantColorOption\n      : this.state.selectedConstantColorOption;\n\n    const multiMessage = this.props.multiColorMessage\n      ? this.props.multiColorMessage\n      : _('Each will be colored according to the selected colors.');\n\n    const singleMessage = this.props.singleColorMessage\n      ? this.props.singleColorMessage\n      : _('All will be colored in the same color.');\n\n    if (this.context.traceIndexes.length > 1) {\n      return (\n        <Field {...this.props} suppressMultiValuedMessage>\n          <RadioBlocks\n            options={constantOptions}\n            activeOption={selectedConstantColorOption}\n            onOptionChange={\n              this.props.onConstantColorOptionChange\n                ? this.props.onConstantColorOptionChange\n                : value => this.setState({selectedConstantColorOption: value})\n            }\n          />\n          <Info>{selectedConstantColorOption === 'single' ? singleMessage : multiMessage}</Info>\n          {selectedConstantColorOption === 'single' ? (\n            <ColorPicker attr={this.props.attr} updatePlot={this.setColor} />\n          ) : (\n            <CustomColorscalePicker\n              suppressMultiValuedMessage\n              attr={this.props.attr}\n              updatePlot={this.setColors}\n              fullValue={this.props.fullValue}\n              initialCategory={'categorical'}\n            />\n          )}\n        </Field>\n      );\n    }\n\n    return (\n      <ColorPicker attr={this.props.attr} updatePlot={this.setColor} label={this.props.label} />\n    );\n  }\n}\n\nUnconnectedMultiColorPicker.propTypes = {\n  multiColorMessage: PropTypes.string,\n  singleColorMessage: PropTypes.string,\n  updatePlot: PropTypes.func,\n  attr: PropTypes.string,\n  parentSelectedConstantColorOption: PropTypes.string,\n  onConstantColorOptionChange: PropTypes.func,\n  messageKeyWordSingle: PropTypes.string,\n  messageKeyWordPlural: PropTypes.string,\n  tracesToColor: PropTypes.array,\n  ...Field.propTypes,\n};\n\nUnconnectedMultiColorPicker.contextTypes = {\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n  traceIndexes: PropTypes.array,\n  fullData: PropTypes.array,\n};\n\nexport default connectToContainer(UnconnectedMultiColorPicker, {\n  modifyPlotProps(props, context, plotProps) {\n    if (plotProps.isVisible) {\n      const colors = [];\n      let tracesToColor = [];\n      const dedupedTraceIndexes = [];\n\n      context.traceIndexes.forEach(i => {\n        if (!dedupedTraceIndexes.includes(i)) {\n          dedupedTraceIndexes.push(i);\n        }\n      });\n\n      dedupedTraceIndexes.forEach(traceIndex => {\n        const traces = context.fullData.filter(trace => trace.index === traceIndex);\n        tracesToColor = tracesToColor.concat(traces);\n\n        traces.forEach(t => {\n          const value = nestedProperty(t, props.attr).get();\n          if (value) {\n            colors.push(value);\n          }\n        });\n      });\n\n      plotProps.tracesToColor = tracesToColor;\n      plotProps.fullValue = colors.map(c => [0, c]);\n    }\n  },\n});\n"]}