{"version":3,"sources":["../../../src/components/fields/RectanglePositioner.js"],"names":["maxWidth","gridRes","UnconnectedRectanglePositioner","props","context","sendUpdate","bind","attr","cartesian","x","y","state","snap","width","height","fieldWidthPx","fieldHeightPx","x0","x1","y0","y1","Math","round","v","payload","updateContainer","_","localize","fullContainer","fullLayout","plotWidthPx","plotHeightPx","xaxis","domain","yaxis","aspectRatio","min","left","top","zoomable","overlaying","marginRight","setState","label","value","Array","fill","map","i","borderBottom","borderRight","style","deltaX","deltaY","Component","propTypes","fullValue","PropTypes","any","updatePlot","func","bool","Field","contextTypes","object"],"mappings":"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","file":"RectanglePositioner.js","sourcesContent":["import Field from './Field';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectToContainer} from 'lib';\nimport ResizableRect from 'react-resizable-rotatable-draggable';\nimport RadioBlocks from '../widgets/RadioBlocks';\nimport DualNumeric from './DualNumeric';\n\nconst maxWidth = 276;\nconst gridRes = 8;\n\nclass UnconnectedRectanglePositioner extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.sendUpdate = this.sendUpdate.bind(this);\n    this.attr = this.props.cartesian\n      ? {\n          x: ['xaxis.domain[0]', 'xaxis.domain[1]'],\n          y: ['yaxis.domain[0]', 'yaxis.domain[1]'],\n        }\n      : {x: ['domain.x[0]', 'domain.x[1]'], y: ['domain.y[0]', 'domain.y[1]']};\n    this.state = {snap: true};\n  }\n\n  sendUpdate({x, y, width, height, fieldWidthPx, fieldHeightPx}) {\n    const x0 = x / fieldWidthPx;\n    const x1 = (width + x) / fieldWidthPx;\n    const y0 = (fieldHeightPx - (height + y)) / fieldHeightPx;\n    const y1 = (fieldHeightPx - y) / fieldHeightPx;\n\n    const snap = this.state.snap ? v => Math.round(v * gridRes) / gridRes : v => v;\n\n    const payload = {};\n\n    if (x0 >= 0 && x1 <= 1) {\n      payload[this.attr.x[0]] = snap(x0);\n      payload[this.attr.x[1]] = snap(x1);\n    }\n\n    if (y0 >= 0 && y1 <= 1) {\n      payload[this.attr.y[0]] = snap(y0);\n      payload[this.attr.y[1]] = snap(y1);\n    }\n\n    this.context.updateContainer(payload);\n  }\n\n  render() {\n    const {attr, cartesian} = this.props;\n    const {\n      localize: _,\n      fullContainer,\n      fullLayout: {width: plotWidthPx, height: plotHeightPx},\n    } = this.context;\n    const x = cartesian ? fullContainer.xaxis.domain : fullContainer.domain.x;\n    const y = cartesian ? fullContainer.yaxis.domain : fullContainer.domain.y;\n    const aspectRatio = plotHeightPx / plotWidthPx;\n    const fieldWidthPx = Math.min(maxWidth, maxWidth / aspectRatio);\n    const fieldHeightPx = Math.min(maxWidth, maxWidth * aspectRatio);\n\n    const width = fieldWidthPx * (x[1] - x[0]);\n    const height = fieldHeightPx * (y[1] - y[0]);\n    const left = fieldWidthPx * x[0];\n    const top = fieldHeightPx * (1 - y[1]);\n\n    let zoomable = '';\n    if (\n      !fullContainer.xaxis ||\n      !fullContainer.yaxis ||\n      (!fullContainer.xaxis.overlaying && !fullContainer.yaxis.overlaying)\n    ) {\n      zoomable = 'n, w, s, e, nw, ne, se, sw';\n    } else if (!fullContainer.xaxis.overlaying) {\n      zoomable = 'e, w';\n    } else if (!fullContainer.yaxis.overlaying) {\n      zoomable = 'n, s';\n    }\n\n    return (\n      <div style={{marginRight: 25}}>\n        <Field {...this.props} attr={attr}>\n          <Field label={_('Snap to Grid')}>\n            <RadioBlocks\n              alignment=\"center\"\n              onOptionChange={snap => this.setState({snap: snap})}\n              activeOption={this.state.snap}\n              options={[{label: _('On'), value: true}, {label: _('Off'), value: false}]}\n            />\n          </Field>\n          <div\n            className=\"rect-container\"\n            style={{\n              width: fieldWidthPx + 1,\n              height: fieldHeightPx + 1,\n            }}\n          >\n            {Array(gridRes * gridRes)\n              .fill(0)\n              .map((v, i) => (\n                <div\n                  key={i}\n                  className=\"rect-grid\"\n                  style={{\n                    width: fieldWidthPx / gridRes - 1,\n                    height: fieldHeightPx / gridRes - 1,\n                    borderBottom: i < gridRes * (gridRes - 1) ? '0' : '1px solid ',\n                    borderRight: (i + 1) % gridRes ? '0' : '1px solid',\n                  }}\n                />\n              ))}\n            <ResizableRect\n              bounds=\"parent\"\n              width={width}\n              height={height}\n              left={left}\n              top={top}\n              rotatable={false}\n              draggable={!this.state.snap}\n              zoomable={zoomable}\n              onResize={style => {\n                this.sendUpdate({\n                  fieldWidthPx,\n                  fieldHeightPx,\n                  width: style.width,\n                  height: style.height,\n                  x: style.left,\n                  y: style.top,\n                });\n              }}\n              onDrag={(deltaX, deltaY) => {\n                this.sendUpdate({\n                  fieldWidthPx,\n                  fieldHeightPx,\n                  width,\n                  height,\n                  x: left + deltaX,\n                  y: top + deltaY,\n                });\n              }}\n            />\n          </div>\n          {fullContainer.xaxis && fullContainer.xaxis.overlaying ? (\n            ''\n          ) : (\n            <DualNumeric\n              label={_('X')}\n              attr={this.attr.x[0]}\n              attr2={this.attr.x[1]}\n              percentage\n              step={1}\n              min={0}\n              max={100}\n            />\n          )}\n          {fullContainer.yaxis && fullContainer.yaxis.overlaying ? (\n            ''\n          ) : (\n            <DualNumeric\n              label={_('Y')}\n              attr={this.attr.y[0]}\n              attr2={this.attr.y[1]}\n              percentage\n              step={1}\n              min={0}\n              max={100}\n            />\n          )}\n        </Field>\n      </div>\n    );\n  }\n}\n\nUnconnectedRectanglePositioner.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  cartesian: PropTypes.bool,\n  ...Field.propTypes,\n};\n\nUnconnectedRectanglePositioner.contextTypes = {\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n  fullContainer: PropTypes.object,\n  fullLayout: PropTypes.object,\n};\n\nexport default connectToContainer(UnconnectedRectanglePositioner);\n"]}