{"version":3,"sources":["../../../src/components/fields/TraceSelector.js"],"names":["TraceSelector","props","context","updatePlot","bind","setGl","glEnabled","setTraceDefaults","toggleGlControls","container","fullContainer","updateContainer","setLocals","state","showGlControls","type","endsWith","setState","_","localize","traceOptions","traceTypesConfig","traces","plotSchema","label","value","fullValue","gl","mode","glByDefault","nextProps","nextContext","traceType","slice","length","Object","assign","options","clearable","advancedTraceTypeSelector","display","width","alignItems","openModal","TraceTypeSelector","TRACES_WITH_GL","includes","Component","contextType","EditorControlsContext","propTypes","PropTypes","object","isRequired","any","func"],"mappings":"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","file":"TraceSelector.js","sourcesContent":["import {UnconnectedDropdown} from './Dropdown';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {\n  connectToContainer,\n  traceTypeToPlotlyInitFigure,\n  plotlyTraceToCustomTrace,\n  computeTraceOptionsFromSchema,\n} from 'lib';\nimport {TRACES_WITH_GL} from 'lib/constants';\nimport {TraceTypeSelector, TraceTypeSelectorButton, RadioBlocks} from 'components/widgets';\nimport Field from './Field';\nimport {CogIcon} from 'plotly-icons';\nimport {EditorControlsContext, ModalProviderContext} from '../../context';\n\nclass TraceSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.updatePlot = this.updatePlot.bind(this);\n    this.setGl = this.setGl.bind(this);\n    this.glEnabled = this.glEnabled.bind(this);\n    this.setTraceDefaults = this.setTraceDefaults.bind(this);\n    this.toggleGlControls = this.toggleGlControls.bind(this);\n\n    this.setTraceDefaults(props.container, props.fullContainer, props.updateContainer);\n    this.setLocals(props, context);\n\n    this.state = {showGlControls: false};\n  }\n\n  glEnabled() {\n    return this.props.container.type && this.props.container.type.endsWith('gl') ? 'gl' : '';\n  }\n\n  toggleGlControls() {\n    this.setState({showGlControls: !this.state.showGlControls});\n  }\n\n  setLocals(props, context) {\n    const _ = context.localize;\n    if (props.traceOptions) {\n      this.traceOptions = props.traceOptions;\n    } else if (context.traceTypesConfig) {\n      this.traceOptions = context.traceTypesConfig.traces(_);\n    } else if (context.plotSchema) {\n      this.traceOptions = computeTraceOptionsFromSchema(context.plotSchema, _, this.context);\n    } else {\n      this.traceOptions = [{label: _('Scatter'), value: 'scatter'}];\n    }\n    if (props.container) {\n      this.fullValue = plotlyTraceToCustomTrace(props.container);\n    }\n  }\n\n  setTraceDefaults(container, fullContainer, updateContainer, gl) {\n    if (container && !container.mode && fullContainer.type === 'scatter') {\n      updateContainer({\n        type: 'scatter' + (gl || this.context.glByDefault ? gl : this.glEnabled()),\n        mode: fullContainer.mode || 'markers',\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    const {container, fullContainer, updateContainer} = nextProps;\n    this.setTraceDefaults(container, fullContainer, updateContainer);\n    this.setLocals(nextProps, nextContext);\n  }\n\n  updatePlot(value) {\n    const {updateContainer} = this.props;\n    const {glByDefault} = this.context;\n    if (updateContainer) {\n      updateContainer(traceTypeToPlotlyInitFigure(value, this.glEnabled() || glByDefault));\n    }\n  }\n\n  setGl(value) {\n    const {container, fullContainer, updateContainer} = this.props;\n    const gl = 'gl';\n\n    this.setTraceDefaults(container, fullContainer, updateContainer, value);\n\n    const traceType =\n      this.fullValue.endsWith(gl) && value === ''\n        ? this.fullValue.slice(0, -gl.length)\n        : this.fullValue;\n\n    updateContainer(traceTypeToPlotlyInitFigure(traceType, value));\n  }\n\n  render() {\n    const props = Object.assign({}, this.props, {\n      fullValue: this.fullValue,\n      updatePlot: this.updatePlot,\n      options: this.traceOptions,\n      clearable: false,\n    });\n    const {localize: _, advancedTraceTypeSelector} = this.context;\n\n    const options = [{label: _('SVG'), value: ''}, {label: _('WebGL'), value: 'gl'}];\n\n    // Check and see if the advanced selector prop is true\n    if (advancedTraceTypeSelector) {\n      return (\n        <div>\n          <Field {...props}>\n            <div\n              style={{\n                display: 'flex',\n                width: '100%',\n                alignItems: 'center',\n              }}\n            >\n              <ModalProviderContext.Consumer>\n                {({openModal}) => (\n                  <TraceTypeSelectorButton\n                    {...props}\n                    traceTypesConfig={this.context.traceTypesConfig}\n                    handleClick={() =>\n                      openModal(TraceTypeSelector, {\n                        ...props,\n                        traceTypesConfig: this.context.traceTypesConfig,\n                        glByDefault: this.context.glByDefault,\n                      })\n                    }\n                  />\n                )}\n              </ModalProviderContext.Consumer>\n              {!TRACES_WITH_GL.includes(this.props.container.type) ? (\n                ''\n              ) : (\n                <CogIcon className=\"menupanel__icon\" onClick={this.toggleGlControls} />\n              )}\n            </div>\n          </Field>\n          {!(TRACES_WITH_GL.includes(this.props.container.type) && this.state.showGlControls) ? (\n            ''\n          ) : (\n            <Field label={_('Rendering')}>\n              <RadioBlocks\n                options={options}\n                activeOption={this.glEnabled()}\n                onOptionChange={this.setGl}\n              />\n            </Field>\n          )}\n        </div>\n      );\n    }\n\n    return <UnconnectedDropdown {...props} />;\n  }\n}\n\nTraceSelector.contextType = EditorControlsContext;\n\nTraceSelector.propTypes = {\n  container: PropTypes.object.isRequired,\n  fullContainer: PropTypes.object.isRequired,\n  fullValue: PropTypes.any,\n  updateContainer: PropTypes.func,\n};\n\nexport default connectToContainer(TraceSelector);\n"]}