{"version":3,"sources":["../../../src/components/containers/derived.js"],"names":["LayoutPanel","PlotlyPanel","LayoutSection","PlotlySection","TraceTypeSection","props","context","fullContainer","fullData","mode","traceTypes","ifConnectedToTrace","includes","type","ifConnectedToLayout","some","t","contextTypes","containerConnectedContextTypes","propTypes","children","PropTypes","node","name","string","array","defaultProps"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA,IAAMA,cAAc,8BAAoBC,qBAApB,CAApB;AACA,IAAMC,gBAAgB,8BAAoBC,uBAApB,CAAtB;;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,OAAR,EAAoB;AAAA,MACpCC,aADoC,GACTD,OADS,CACpCC,aADoC;AAAA,MACrBC,QADqB,GACTF,OADS,CACrBE,QADqB;AAAA,MAEpCC,IAFoC,GAEhBJ,KAFgB,CAEpCI,IAFoC;AAAA,MAE9BC,UAF8B,GAEhBL,KAFgB,CAE9BK,UAF8B;;;AAI3C,MAAMC,qBACJF,SAAS,OAAT,IAAoBF,aAApB,IAAqCG,WAAWE,QAAX,CAAoBL,cAAcM,IAAlC,CADvC;;AAGA,MAAMC,sBACJL,SAAS,QAAT,IAAqBD,QAArB,IAAiCA,SAASO,IAAT,CAAc;AAAA,WAAKL,WAAWE,QAAX,CAAoBI,EAAEH,IAAtB,CAAL;AAAA,GAAd,CADnC;;AAGA,MAAIF,sBAAsBG,mBAA1B,EAA+C;AAC7C,WAAO,8BAAC,uBAAD,EAAmBT,KAAnB,CAAP;AACD;;AAED,SAAO,IAAP;AACD,CAfD;;AAiBAD,iBAAiBa,YAAjB,GAAgCC,mCAAhC;AACAd,iBAAiBe,SAAjB,GAA6B;AAC3BC,YAAUC,oBAAUC,IADO;AAE3BC,QAAMF,oBAAUG,MAFW;AAG3Bd,cAAYW,oBAAUI,KAHK;AAI3BhB,QAAMY,oBAAUG;AAJW,CAA7B;;AAOApB,iBAAiBsB,YAAjB,GAAgC;AAC9BhB,cAAY,EADkB;AAE9BD,QAAM;AAFwB,CAAhC;;QAKQT,W,GAAAA,W;QAAaE,a,GAAAA,a;QAAeE,gB,GAAAA,gB","file":"derived.js","sourcesContent":["import React from 'react';\nimport PlotlyPanel from './PlotlyPanel';\nimport PlotlySection from './PlotlySection';\nimport PropTypes from 'prop-types';\n\nimport {connectLayoutToPlot, containerConnectedContextTypes} from 'lib';\n\nconst LayoutPanel = connectLayoutToPlot(PlotlyPanel);\nconst LayoutSection = connectLayoutToPlot(PlotlySection);\n\nconst TraceTypeSection = (props, context) => {\n  const {fullContainer, fullData} = context;\n  const {mode, traceTypes} = props;\n\n  const ifConnectedToTrace =\n    mode === 'trace' && fullContainer && traceTypes.includes(fullContainer.type);\n\n  const ifConnectedToLayout =\n    mode === 'layout' && fullData && fullData.some(t => traceTypes.includes(t.type));\n\n  if (ifConnectedToTrace || ifConnectedToLayout) {\n    return <PlotlySection {...props} />;\n  }\n\n  return null;\n};\n\nTraceTypeSection.contextTypes = containerConnectedContextTypes;\nTraceTypeSection.propTypes = {\n  children: PropTypes.node,\n  name: PropTypes.string,\n  traceTypes: PropTypes.array,\n  mode: PropTypes.string,\n};\n\nTraceTypeSection.defaultProps = {\n  traceTypes: [],\n  mode: 'layout',\n};\n\nexport {LayoutPanel, LayoutSection, TraceTypeSection};\n"]}