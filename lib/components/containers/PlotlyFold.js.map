{"version":3,"sources":["../../../src/components/containers/PlotlyFold.js"],"names":["Fold","foldVisible","foldInfo","props","messageIfEmpty","getChildContext","deleteContainer","context","canDelete","children","className","folded","toggleFold","hideHeader","Icon","icon","name","contentClass","headerClass","arrowClass","arrowIcon","deleteButton","e","stopPropagation","foldHeader","foldContent","classes","provideValue","Component","plotly_editor_traits","foldable","propTypes","PropTypes","bool","node","string","object","func","oneOfType","contextTypes","childContextTypes","PlotlyFold","determineVisibility","nextProps","nextContext","React","Children","forEach","child","attr","plotProps","type","modifyPlotProps","isVisible","no_visibility_forcing","Object","assign","containerConnectedContextTypes"],"mappings":"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","file":"PlotlyFold.js","sourcesContent":["import FoldEmpty from './FoldEmpty';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport classnames from 'classnames';\nimport {CloseIcon, AngleDownIcon} from 'plotly-icons';\nimport {unpackPlotProps, containerConnectedContextTypes, striptags} from 'lib';\nimport {PlotlyFoldContext} from '../../context';\n\nexport class Fold extends Component {\n  constructor() {\n    super();\n    this.foldVisible = true;\n  }\n\n  getChildContext() {\n    return {\n      foldInfo: this.props.foldInfo ? this.props.foldInfo : null,\n    };\n  }\n\n  provideValue() {\n    return {\n      foldInfo: this.props.foldInfo ? this.props.foldInfo : null,\n    };\n  }\n\n  render() {\n    if (!this.foldVisible && !this.props.messageIfEmpty) {\n      return <PlotlyFoldContext.Provider value={this.getChildContext()} />;\n    }\n    const {deleteContainer} = this.context;\n    const {\n      canDelete,\n      children,\n      className,\n      folded,\n      foldInfo,\n      toggleFold,\n      hideHeader,\n      icon: Icon,\n      messageIfEmpty,\n      name,\n    } = this.props;\n\n    const contentClass = classnames('fold__content', {\n      'fold__content--noheader': hideHeader,\n    });\n\n    const headerClass = classnames('fold__top', {\n      'fold__top--open': !folded,\n    });\n\n    const arrowClass = classnames('fold__top__arrow', {\n      'fold__top__arrow--open': !folded,\n    });\n\n    const arrowIcon = (\n      <div className={arrowClass}>\n        <div className=\"fold__top__arrow__wrapper\">\n          <AngleDownIcon />\n        </div>\n      </div>\n    );\n\n    const icon = Icon ? <Icon className=\"fold__top__icon\" /> : null;\n\n    const deleteButton =\n      canDelete && typeof deleteContainer === 'function' ? (\n        <div\n          className=\"fold__top__delete js-fold__delete\"\n          onClick={e => {\n            e.stopPropagation();\n            deleteContainer(foldInfo);\n          }}\n        >\n          <CloseIcon />\n        </div>\n      ) : null;\n\n    const foldHeader = !hideHeader && (\n      <div className={headerClass} onClick={toggleFold}>\n        <div className=\"fold__top__arrow-title\">\n          {arrowIcon}\n          {icon}\n          <div className=\"fold__top__title\">{striptags(name)}</div>\n        </div>\n        {deleteButton}\n      </div>\n    );\n\n    let foldContent = null;\n    if (!folded) {\n      if (this.foldVisible) {\n        foldContent = <div className={contentClass}>{children}</div>;\n      } else {\n        foldContent = (\n          <div className={contentClass}>\n            <FoldEmpty icon={Icon} messagePrimary={messageIfEmpty} />\n          </div>\n        );\n      }\n    }\n\n    const classes = className ? ' ' + className : '';\n\n    return (\n      <PlotlyFoldContext.Provider value={this.provideValue()}>\n        <div className={`fold${classes}`}>\n          {foldHeader}\n          {foldContent}\n        </div>\n      </PlotlyFoldContext.Provider>\n    );\n  }\n}\n\nFold.plotly_editor_traits = {foldable: true};\n\nFold.propTypes = {\n  canDelete: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  folded: PropTypes.bool,\n  foldInfo: PropTypes.object,\n  toggleFold: PropTypes.func,\n  hideHeader: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  messageIfEmpty: PropTypes.string,\n  name: PropTypes.string,\n};\n\nFold.contextTypes = {\n  deleteContainer: PropTypes.func,\n};\n\nFold.childContextTypes = {\n  foldInfo: PropTypes.object,\n};\n\nclass PlotlyFold extends Fold {\n  constructor(props, context) {\n    super(props, context);\n\n    this.foldVisible = false;\n    this.determineVisibility(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.determineVisibility(nextProps, nextContext);\n  }\n\n  determineVisibility(nextProps, nextContext) {\n    this.foldVisible = false;\n\n    React.Children.forEach(nextProps.children, child => {\n      if (!child || this.foldVisible) {\n        return;\n      }\n\n      if (child.props.attr) {\n        // attr components force fold open if they are visible\n        const plotProps = unpackPlotProps(child.props, nextContext);\n        if (child.type.modifyPlotProps) {\n          child.type.modifyPlotProps(child.props, nextContext, plotProps);\n        }\n\n        this.foldVisible = this.foldVisible || plotProps.isVisible;\n        return;\n      }\n\n      if (!(child.type.plotly_editor_traits || {}).no_visibility_forcing) {\n        // non-attr components force visibility (unless they don't via traits)\n        this.foldVisible = true;\n        return;\n      }\n    });\n  }\n}\n\nPlotlyFold.plotly_editor_traits = {\n  foldable: true,\n};\n\nPlotlyFold.contextTypes = Object.assign(\n  {\n    deleteContainer: PropTypes.func,\n  },\n  containerConnectedContextTypes\n);\n\nexport default PlotlyFold;\n"]}