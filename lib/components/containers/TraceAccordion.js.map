{"version":3,"sources":["../../../src/components/containers/TraceAccordion.js"],"names":["TraceFold","PlotlyFold","TraceAccordion","props","context","setLocals","nextProps","nextContext","base","canGroup","fullData","data","traceFilterCondition","filteredTracesDataIndexes","filteredTraces","length","filter","t","i","fullTrace","tr","index","trace","push","_","localize","dataArrayPositionsByTraceType","fullDataArrayPositionsByTraceType","forEach","traceType","_expandedIndex","Object","keys","map","type","find","value","label","children","d","canAdd","addAction","handler","onUpdate","EDITOR_ACTIONS","ADD_TRACE","traceFolds","renderTraceFolds","renderTracePanelHelp","renderUngroupedTraceFolds","renderGroupedTraceFolds","Component","contextType","EditorControlsContext","propTypes","PropTypes","bool","node","func"],"mappings":"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","file":"TraceAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PlotlyPanel from './PlotlyPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport {connectTraceToPlot, plotlyTraceToCustomTrace} from 'lib';\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\nimport {traceTypes} from 'lib/traceTypes';\nimport {PanelMessage} from './PanelEmpty';\nimport {EditorControlsContext} from '../../context';\n\nconst TraceFold = connectTraceToPlot(PlotlyFold);\n\nclass TraceAccordion extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.setLocals(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(props, context) {\n    const base = props.canGroup ? context.fullData : context.data;\n    const traceFilterCondition = this.props.traceFilterCondition || (() => true);\n\n    this.filteredTracesDataIndexes = [];\n    this.filteredTraces = [];\n\n    if (base && base.length && context.fullData.length) {\n      this.filteredTraces = base.filter((t, i) => {\n        const fullTrace = props.canGroup ? t : context.fullData.filter(tr => tr.index === i)[0];\n\n        if (fullTrace) {\n          const trace = context.data[fullTrace.index];\n          if (traceFilterCondition(trace, fullTrace)) {\n            this.filteredTracesDataIndexes.push(fullTrace.index);\n            return true;\n          }\n        }\n\n        return false;\n      });\n    }\n  }\n\n  renderGroupedTraceFolds() {\n    if (!this.filteredTraces.length || this.filteredTraces.length <= 1) {\n      return null;\n    }\n\n    const {localize: _} = this.context;\n    const dataArrayPositionsByTraceType = {};\n    const fullDataArrayPositionsByTraceType = {};\n\n    this.filteredTraces.forEach(trace => {\n      const traceType = plotlyTraceToCustomTrace(trace);\n      if (!dataArrayPositionsByTraceType[traceType]) {\n        dataArrayPositionsByTraceType[traceType] = [];\n      }\n\n      if (!fullDataArrayPositionsByTraceType[traceType]) {\n        fullDataArrayPositionsByTraceType[traceType] = [];\n      }\n\n      dataArrayPositionsByTraceType[traceType].push(trace.index);\n      // _expandedIndex is the trace's index in the fullData array\n      fullDataArrayPositionsByTraceType[traceType].push(trace._expandedIndex);\n    });\n\n    return Object.keys(fullDataArrayPositionsByTraceType).map((type, index) => (\n      <TraceFold\n        key={index}\n        traceIndexes={dataArrayPositionsByTraceType[type]}\n        name={traceTypes(_).find(t => t.value === type).label}\n        fullDataArrayPosition={fullDataArrayPositionsByTraceType[type]}\n      >\n        {this.props.children}\n      </TraceFold>\n    ));\n  }\n\n  renderUngroupedTraceFolds() {\n    if (this.filteredTraces.length) {\n      return this.filteredTraces.map((d, i) => (\n        <TraceFold\n          key={i}\n          traceIndexes={[d.index]}\n          canDelete={this.props.canAdd}\n          fullDataArrayPosition={[d._expandedIndex]}\n        >\n          {this.props.children}\n        </TraceFold>\n      ));\n    }\n    return null;\n  }\n\n  renderTraceFolds() {\n    if (this.filteredTraces.length) {\n      return this.filteredTraces.map((d, i) => (\n        <TraceFold\n          key={i}\n          traceIndexes={[this.filteredTracesDataIndexes[i]]}\n          canDelete={this.props.canAdd}\n        >\n          {this.props.children}\n        </TraceFold>\n      ));\n    }\n    return null;\n  }\n\n  renderTracePanelHelp() {\n    const _ = this.context.localize;\n    return (\n      <PanelMessage heading={_('Trace your data.')}>\n        <p>\n          {_('Traces of various types like bar and line are the building blocks of your figure.')}\n        </p>\n        <p>\n          {_(\n            'You can add as many as you like, mixing and matching types and arranging them into subplots.'\n          )}\n        </p>\n        <p>{_('Click on the + button above to add a trace.')}</p>\n      </PanelMessage>\n    );\n  }\n\n  render() {\n    const {canAdd, canGroup} = this.props;\n    const _ = this.context.localize;\n\n    if (canAdd) {\n      const addAction = {\n        label: _('Trace'),\n        handler: ({onUpdate}) => {\n          if (onUpdate) {\n            onUpdate({\n              type: EDITOR_ACTIONS.ADD_TRACE,\n            });\n          }\n        },\n      };\n      const traceFolds = this.renderTraceFolds();\n      return (\n        <PlotlyPanel addAction={addAction}>\n          {traceFolds ? traceFolds : this.renderTracePanelHelp()}\n        </PlotlyPanel>\n      );\n    }\n\n    if (canGroup) {\n      if (this.filteredTraces.length === 1) {\n        return <TraceRequiredPanel>{this.renderUngroupedTraceFolds()}</TraceRequiredPanel>;\n      }\n\n      if (this.filteredTraces.length > 1) {\n        return (\n          <TraceRequiredPanel noPadding>\n            <Tabs>\n              <TabList>\n                <Tab>{_('Individually')}</Tab>\n                <Tab>{_('By Type')}</Tab>\n              </TabList>\n              <TabPanel>\n                <PlotlyPanel>{this.renderUngroupedTraceFolds()}</PlotlyPanel>\n              </TabPanel>\n              <TabPanel>\n                <PlotlyPanel>{this.renderGroupedTraceFolds()}</PlotlyPanel>\n              </TabPanel>\n            </Tabs>\n          </TraceRequiredPanel>\n        );\n      }\n    }\n\n    return <TraceRequiredPanel>{this.renderTraceFolds()}</TraceRequiredPanel>;\n  }\n}\n\nTraceAccordion.contextType = EditorControlsContext;\n\nTraceAccordion.propTypes = {\n  canAdd: PropTypes.bool,\n  canGroup: PropTypes.bool,\n  children: PropTypes.node,\n  traceFilterCondition: PropTypes.func,\n};\n\nexport default TraceAccordion;\n"]}