{"version":3,"sources":["../../../src/components/containers/TransformAccordion.js"],"names":["TransformFold","PlotlyFold","TransformAccordion","context","fullContainer","transforms","_","localize","container","dataSourceOptions","children","props","transformTypes","label","type","transformBy","map","foldNameSuffix","tr","groupssrc","find","d","value","targetsrc","filteredTransforms","filter","Boolean","content","length","i","addActionOptions","some","t","addAction","handler","updateContainer","transformIndex","Array","isArray","key","payload","target","groups","styles","textAlign","Component","contextTypes","PropTypes","object","func","array","propTypes","node"],"mappings":"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","file":"TransformAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport PlotlyPanel from './PlotlyPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectTransformToTrace} from 'lib';\nimport {PanelMessage} from './PanelEmpty';\n\nconst TransformFold = connectTransformToTrace(PlotlyFold);\n\nclass TransformAccordion extends Component {\n  render() {\n    const {\n      fullContainer: {transforms = []},\n      localize: _,\n      container,\n      dataSourceOptions,\n    } = this.context;\n    const {children} = this.props;\n\n    const transformTypes = [\n      {label: _('Filter'), type: 'filter'},\n      {label: _('Split'), type: 'groupby'},\n      {label: _('Aggregate'), type: 'aggregate'},\n      {label: _('Sort'), type: 'sort'},\n    ];\n\n    const transformBy =\n      container.transforms &&\n      container.transforms.map(tr => {\n        let foldNameSuffix = '';\n        if (tr.groupssrc) {\n          const groupssrc =\n            dataSourceOptions && dataSourceOptions.find(d => d.value === tr.groupssrc);\n          foldNameSuffix = `: ${groupssrc && groupssrc.label ? groupssrc.label : tr.groupssrc}`;\n        } else if (tr.targetsrc) {\n          const targetsrc =\n            dataSourceOptions && dataSourceOptions.find(d => d.value === tr.targetsrc);\n          foldNameSuffix = `: ${targetsrc && targetsrc.label ? targetsrc.label : tr.targetsrc}`;\n        }\n        return foldNameSuffix;\n      });\n\n    const filteredTransforms = transforms.filter(({type}) => Boolean(type));\n    const content =\n      filteredTransforms.length &&\n      filteredTransforms.map((tr, i) => (\n        <TransformFold\n          key={i}\n          transformIndex={i}\n          name={`${transformTypes.filter(({type}) => type === tr.type)[0].label}${transformBy &&\n            transformBy[i]}`}\n          canDelete={true}\n        >\n          {children}\n        </TransformFold>\n      ));\n\n    // cannot have 2 Split transforms on one trace:\n    // https://github.com/plotly/plotly.js/issues/1742\n    const addActionOptions =\n      container.transforms && container.transforms.some(t => t.type === 'groupby')\n        ? transformTypes.filter(t => t.type !== 'groupby')\n        : transformTypes;\n\n    const addAction = {\n      label: _('Transform'),\n      handler: addActionOptions.map(({label, type}) => {\n        return {\n          label,\n          handler: context => {\n            const {fullContainer, updateContainer} = context;\n            if (updateContainer) {\n              const transformIndex = Array.isArray(fullContainer.transforms)\n                ? fullContainer.transforms.length\n                : 0;\n              const key = `transforms[${transformIndex}]`;\n\n              const payload = {type};\n              if (type === 'filter') {\n                payload.target = [];\n                payload.targetsrc = null;\n              } else {\n                payload.groupssrc = null;\n                payload.groups = null;\n              }\n\n              if (type === 'groupby') {\n                payload.styles = [];\n              }\n\n              updateContainer({[key]: payload});\n            }\n          },\n        };\n      }),\n    };\n\n    return (\n      <PlotlyPanel addAction={addAction}>\n        {content ? (\n          content\n        ) : (\n          <PanelMessage icon={null}>\n            <div style={{textAlign: 'left'}}>\n              <p>\n                <strong>{_('Filter')}</strong>{' '}\n                {_(' transforms allow you to filter data out from a trace.')}\n              </p>\n              <p>\n                <strong>{_('Split')}</strong>{' '}\n                {_(\n                  ' transforms allow you to create multiple traces from one source trace, so as to style them differently.'\n                )}\n              </p>\n              <p>\n                <strong>{_('Aggregate')}</strong>{' '}\n                {_(\n                  ' transforms allow you to summarize a trace using an aggregate function like \"average\" or \"minimum\".'\n                )}\n              </p>\n              <p>\n                <strong>{_('Sort')}</strong>{' '}\n                {_(\n                  ' transforms allow you to sort a trace, so as to control marker overlay or line connection order.'\n                )}\n              </p>\n            </div>\n            <p>{_('Click on the + button above to add a transform.')}</p>\n          </PanelMessage>\n        )}\n      </PlotlyPanel>\n    );\n  }\n}\n\nTransformAccordion.contextTypes = {\n  fullContainer: PropTypes.object,\n  localize: PropTypes.func,\n  container: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n};\n\nTransformAccordion.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default TransformAccordion;\n"]}