{"version":3,"sources":["../../../src/components/containers/ShapeAccordion.js"],"names":["ShapeFold","PlotlyFold","ShapeAccordion","context","layout","shapes","_","localize","props","canAdd","children","content","length","map","shp","i","addAction","label","handler","updateContainer","shapeIndex","Array","isArray","key","value","line","color","COLORS","charcoal","fillcolor","middleGray","opacity","Component","contextType","EditorControlsContext","propTypes","PropTypes","node","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,+BAAqBC,oBAArB,CAAlB;;IAEMC,c;;;;;;;;;;;6BACK;AAAA,qBAIH,KAAKC,OAJF;AAAA,2CAELC,MAFK,CAEIC,MAFJ;AAAA,UAEIA,MAFJ,yCAEa,EAFb;AAAA,UAGKC,CAHL,YAGLC,QAHK;AAAA,mBAKoB,KAAKC,KALzB;AAAA,UAKAC,MALA,UAKAA,MALA;AAAA,UAKQC,QALR,UAKQA,QALR;;;AAOP,UAAMC,UACJN,OAAOO,MAAP,IACAP,OAAOQ,GAAP,CAAW,UAACC,GAAD,EAAMC,CAAN;AAAA,eACT;AAAC,mBAAD;AAAA,YAAW,KAAKA,CAAhB,EAAmB,YAAYA,CAA/B,EAAkC,MAAST,EAAE,OAAF,CAAT,UAAuBS,IAAI,CAA3B,CAAlC,EAAkE,WAAWN,MAA7E;AACGC;AADH,SADS;AAAA,OAAX,CAFF;;AAQA,UAAMM,YAAY;AAChBC,eAAOX,EAAE,OAAF,CADS;AAEhBY,iBAAS,uBAA+B;AAAA,cAA7Bd,MAA6B,QAA7BA,MAA6B;AAAA,cAArBe,eAAqB,QAArBA,eAAqB;;AACtC,cAAIC,mBAAJ;AACA,cAAIC,MAAMC,OAAN,CAAclB,OAAOC,MAArB,CAAJ,EAAkC;AAChCe,yBAAahB,OAAOC,MAAP,CAAcO,MAA3B;AACD,WAFD,MAEO;AACLQ,yBAAa,CAAb;AACD;;AAED,cAAMG,kBAAgBH,UAAhB,MAAN;AACA,cAAMI,QAAQ;AACZC,kBAAM,EAACC,OAAOC,kBAAOC,QAAf,EADM;AAEZC,uBAAWF,kBAAOG,UAFN;AAGZC,qBAAS;AAHG,WAAd;;AAMA,cAAIZ,eAAJ,EAAqB;AACnBA,gDAAkBI,GAAlB,EAAwBC,KAAxB;AACD;AACF;AApBe,OAAlB;;AAuBA,aACE;AAAC,4BAAD;AAAA,UAAa,WAAWf,SAASO,SAAT,GAAqB,IAA7C;AACGL,kBACCA,OADD,GAGC;AAAC,kCAAD;AAAA,YAAc,SAASL,EAAE,iCAAF,CAAvB;AACE;AAAA;AAAA;AACGA,cACC,kGADD;AADH,WADF;AAME;AAAA;AAAA;AAAIA,cAAE,6CAAF;AAAJ;AANF;AAJJ,OADF;AAgBD;;;;EAvD0B0B,gB;;AA0D7B9B,eAAe+B,WAAf,GAA6BC,+BAA7B;;AAEAhC,eAAeiC,SAAf,GAA2B;AACzBzB,YAAU0B,oBAAUC,IADK;AAEzB5B,UAAQ2B,oBAAUE;AAFO,CAA3B;;kBAKepC,c","file":"ShapeAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport {LayoutPanel} from './derived';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectShapeToLayout} from 'lib';\nimport {COLORS} from 'lib/constants';\nimport {PanelMessage} from './PanelEmpty';\nimport {EditorControlsContext} from '../../context';\n\nconst ShapeFold = connectShapeToLayout(PlotlyFold);\n\nclass ShapeAccordion extends Component {\n  render() {\n    const {\n      layout: {shapes = []},\n      localize: _,\n    } = this.context;\n    const {canAdd, children} = this.props;\n\n    const content =\n      shapes.length &&\n      shapes.map((shp, i) => (\n        <ShapeFold key={i} shapeIndex={i} name={`${_('Shape')} ${i + 1}`} canDelete={canAdd}>\n          {children}\n        </ShapeFold>\n      ));\n\n    const addAction = {\n      label: _('Shape'),\n      handler: ({layout, updateContainer}) => {\n        let shapeIndex;\n        if (Array.isArray(layout.shapes)) {\n          shapeIndex = layout.shapes.length;\n        } else {\n          shapeIndex = 0;\n        }\n\n        const key = `shapes[${shapeIndex}]`;\n        const value = {\n          line: {color: COLORS.charcoal},\n          fillcolor: COLORS.middleGray,\n          opacity: 0.3,\n        };\n\n        if (updateContainer) {\n          updateContainer({[key]: value});\n        }\n      },\n    };\n\n    return (\n      <LayoutPanel addAction={canAdd ? addAction : null}>\n        {content ? (\n          content\n        ) : (\n          <PanelMessage heading={_('Lines, Rectangles and Ellipses.')}>\n            <p>\n              {_(\n                'Add shapes to a figure to highlight points or periods in time, thresholds, or areas of interest.'\n              )}\n            </p>\n            <p>{_('Click on the + button above to add a shape.')}</p>\n          </PanelMessage>\n        )}\n      </LayoutPanel>\n    );\n  }\n}\n\nShapeAccordion.contextType = EditorControlsContext;\n\nShapeAccordion.propTypes = {\n  children: PropTypes.node,\n  canAdd: PropTypes.bool,\n};\n\nexport default ShapeAccordion;\n"]}