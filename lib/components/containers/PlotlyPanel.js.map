{"version":3,"sources":["../../../src/components/containers/PlotlyPanel.js"],"names":["PanelErrorImpl","_","context","localize","EmbedIconIcon","Component","contextType","EditorControlsContext","PanelError","Panel","props","state","individualFoldStates","hasError","toggleFolds","bind","toggleFold","deleteContainer","deleteAction","setState","hasOpen","length","some","s","map","index","$toggle","numFolds","React","Children","forEach","children","child","type","plotly_editor_traits","foldable","newFoldStates","Array","fill","addAction","e","i","calculateFolds","provideValue","newChildren","key","folded","noPadding","showExpandCollapse","propTypes","PropTypes","object","node","func","bool","defaultProps","contextTypes","childContextTypes","PlotlyPanel","no_visibility_forcing"],"mappings":"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","file":"PlotlyPanel.js","sourcesContent":["import PanelHeader from './PanelHeader';\nimport PanelEmpty from './PanelEmpty';\nimport PropTypes from 'prop-types';\nimport React, {Component, cloneElement} from 'react';\nimport update from 'immutability-helper';\nimport {bem} from 'lib';\nimport {EmbedIconIcon} from 'plotly-icons';\nimport {EditorControlsContext, PlotlyPanelContext} from '../../context';\n\nclass PanelErrorImpl extends Component {\n  render() {\n    const {localize: _} = this.context;\n\n    return (\n      <PanelEmpty icon={EmbedIconIcon} heading={_('Well this is embarrassing.')}>\n        <p>{_('This panel could not be displayed due to an error.')}</p>\n      </PanelEmpty>\n    );\n  }\n}\n\nPanelErrorImpl.contextType = EditorControlsContext;\n\nconst PanelError = PanelErrorImpl;\n\nexport class Panel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      individualFoldStates: [],\n      hasError: false,\n    };\n    this.toggleFolds = this.toggleFolds.bind(this);\n    this.toggleFold = this.toggleFold.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      deleteContainer: this.props.deleteAction ? this.props.deleteAction : null,\n    };\n  }\n\n  provideValue() {\n    return {\n      deleteContainer: this.props.deleteAction ? this.props.deleteAction : null,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({hasError: true});\n  }\n\n  toggleFolds() {\n    const {individualFoldStates} = this.state;\n    const hasOpen = individualFoldStates.length > 0 && individualFoldStates.some(s => s !== true);\n    this.setState({\n      individualFoldStates: individualFoldStates.map(() => hasOpen),\n    });\n  }\n\n  toggleFold(index) {\n    this.setState(update(this.state, {individualFoldStates: {$toggle: [index]}}));\n  }\n\n  calculateFolds() {\n    // to get proper number of child folds and initialize component state\n    let numFolds = 0;\n\n    React.Children.forEach(this.props.children, child => {\n      if (((child && child.type && child.type.plotly_editor_traits) || {}).foldable) {\n        numFolds++;\n      }\n    });\n\n    if (this.state.individualFoldStates.length !== numFolds) {\n      const newFoldStates = new Array(numFolds).fill(false);\n      this.setState({\n        individualFoldStates: this.props.addAction\n          ? newFoldStates.map((e, i) => i !== numFolds - 1)\n          : newFoldStates,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.calculateFolds();\n  }\n  componentDidMount() {\n    this.calculateFolds();\n  }\n\n  render() {\n    const {individualFoldStates, hasError} = this.state;\n\n    if (hasError) {\n      return (\n        <PlotlyPanelContext.Provider value={this.provideValue()}>\n          <PanelError />\n        </PlotlyPanelContext.Provider>\n      );\n    }\n\n    const newChildren = React.Children.map(this.props.children, (child, index) => {\n      if (((child && child.type && child.type.plotly_editor_traits) || {}).foldable) {\n        return cloneElement(child, {\n          key: index,\n          folded: individualFoldStates[index] || false,\n          toggleFold: () => this.toggleFold(index),\n        });\n      }\n      return child;\n    });\n\n    return (\n      <PlotlyPanelContext.Provider value={this.provideValue()}>\n        <div className={`panel${this.props.noPadding ? ' panel--no-padding' : ''}`}>\n          <PanelHeader\n            addAction={this.props.addAction}\n            allowCollapse={this.props.showExpandCollapse && individualFoldStates.length > 1}\n            toggleFolds={this.toggleFolds}\n            hasOpen={individualFoldStates.some(s => s === false)}\n          />\n          <div className={bem('panel', 'content')}>{newChildren}</div>\n        </div>\n      </PlotlyPanelContext.Provider>\n    );\n  }\n}\n\nPanel.propTypes = {\n  addAction: PropTypes.object,\n  children: PropTypes.node,\n  deleteAction: PropTypes.func,\n  noPadding: PropTypes.bool,\n  showExpandCollapse: PropTypes.bool,\n};\n\nPanel.defaultProps = {\n  showExpandCollapse: true,\n};\n\nPanel.contextTypes = {\n  localize: PropTypes.func,\n};\n\nPanel.childContextTypes = {\n  deleteContainer: PropTypes.func,\n};\n\nclass PlotlyPanel extends Panel {}\n\nPlotlyPanel.plotly_editor_traits = {\n  no_visibility_forcing: true,\n};\n\nexport default PlotlyPanel;\n"]}