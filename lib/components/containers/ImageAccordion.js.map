{"version":3,"sources":["../../../src/components/containers/ImageAccordion.js"],"names":["ImageFold","PlotlyFold","ImageAccordion","context","layout","images","_","localize","props","canAdd","children","content","length","map","img","i","addAction","label","handler","updateContainer","imageIndex","Array","isArray","key","value","sizex","sizey","x","y","Component","contextType","EditorControlsContext","propTypes","PropTypes","node","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,+BAAqBC,oBAArB,CAAlB;;IAEMC,c;;;;;;;;;;;6BACK;AAAA,qBAIH,KAAKC,OAJF;AAAA,2CAELC,MAFK,CAEIC,MAFJ;AAAA,UAEIA,MAFJ,yCAEa,EAFb;AAAA,UAGKC,CAHL,YAGLC,QAHK;AAAA,mBAKoB,KAAKC,KALzB;AAAA,UAKAC,MALA,UAKAA,MALA;AAAA,UAKQC,QALR,UAKQA,QALR;;;AAOP,UAAMC,UACJN,OAAOO,MAAP,IACAP,OAAOQ,GAAP,CAAW,UAACC,GAAD,EAAMC,CAAN;AAAA,eACT;AAAC,mBAAD;AAAA,YAAW,KAAKA,CAAhB,EAAmB,YAAYA,CAA/B,EAAkC,MAAST,EAAE,OAAF,CAAT,UAAuBS,IAAI,CAA3B,CAAlC,EAAkE,WAAWN,MAA7E;AACGC;AADH,SADS;AAAA,OAAX,CAFF;;AAQA,UAAMM,YAAY;AAChBC,eAAOX,EAAE,OAAF,CADS;AAEhBY,iBAAS,uBAA+B;AAAA,cAA7Bd,MAA6B,QAA7BA,MAA6B;AAAA,cAArBe,eAAqB,QAArBA,eAAqB;;AACtC,cAAIC,mBAAJ;AACA,cAAIC,MAAMC,OAAN,CAAclB,OAAOC,MAArB,CAAJ,EAAkC;AAChCe,yBAAahB,OAAOC,MAAP,CAAcO,MAA3B;AACD,WAFD,MAEO;AACLQ,yBAAa,CAAb;AACD;;AAED,cAAMG,kBAAgBH,UAAhB,MAAN;AACA,cAAMI,QAAQ;AACZC,mBAAO,GADK;AAEZC,mBAAO,GAFK;AAGZC,eAAG,GAHS;AAIZC,eAAG;AAJS,WAAd;;AAOA,cAAIT,eAAJ,EAAqB;AACnBA,gDAAkBI,GAAlB,EAAwBC,KAAxB;AACD;AACF;AArBe,OAAlB;;AAwBA,aACE;AAAC,4BAAD;AAAA,UAAa,WAAWf,SAASO,SAAT,GAAqB,IAA7C;AACGL,kBACCA,OADD,GAGC;AAAC,kCAAD;AAAA,YAAc,SAASL,EAAE,6BAAF,CAAvB;AACE;AAAA;AAAA;AACGA,cACC,sFADD;AADH,WADF;AAME;AAAA;AAAA;AAAIA,cAAE,8CAAF;AAAJ;AANF;AAJJ,OADF;AAgBD;;;;EAxD0BuB,gB;;AA2D7B3B,eAAe4B,WAAf,GAA6BC,+BAA7B;;AAEA7B,eAAe8B,SAAf,GAA2B;AACzBtB,YAAUuB,oBAAUC,IADK;AAEzBzB,UAAQwB,oBAAUE;AAFO,CAA3B;;kBAKejC,c","file":"ImageAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport {LayoutPanel} from './derived';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectImageToLayout} from 'lib';\nimport {PanelMessage} from './PanelEmpty';\nimport {EditorControlsContext} from '../../context';\n\nconst ImageFold = connectImageToLayout(PlotlyFold);\n\nclass ImageAccordion extends Component {\n  render() {\n    const {\n      layout: {images = []},\n      localize: _,\n    } = this.context;\n    const {canAdd, children} = this.props;\n\n    const content =\n      images.length &&\n      images.map((img, i) => (\n        <ImageFold key={i} imageIndex={i} name={`${_('Image')} ${i + 1}`} canDelete={canAdd}>\n          {children}\n        </ImageFold>\n      ));\n\n    const addAction = {\n      label: _('Image'),\n      handler: ({layout, updateContainer}) => {\n        let imageIndex;\n        if (Array.isArray(layout.images)) {\n          imageIndex = layout.images.length;\n        } else {\n          imageIndex = 0;\n        }\n\n        const key = `images[${imageIndex}]`;\n        const value = {\n          sizex: 0.1,\n          sizey: 0.1,\n          x: 0.5,\n          y: 0.5,\n        };\n\n        if (updateContainer) {\n          updateContainer({[key]: value});\n        }\n      },\n    };\n\n    return (\n      <LayoutPanel addAction={canAdd ? addAction : null}>\n        {content ? (\n          content\n        ) : (\n          <PanelMessage heading={_('Logos, watermarks and more.')}>\n            <p>\n              {_(\n                'Embed images in your figure to make the data more readable or to brand your content.'\n              )}\n            </p>\n            <p>{_('Click on the + button above to add an image.')}</p>\n          </PanelMessage>\n        )}\n      </LayoutPanel>\n    );\n  }\n}\n\nImageAccordion.contextType = EditorControlsContext;\n\nImageAccordion.propTypes = {\n  children: PropTypes.node,\n  canAdd: PropTypes.bool,\n};\n\nexport default ImageAccordion;\n"]}