{"version":3,"sources":["../../../src/components/widgets/NumericInput.js"],"names":["UP_ARROW","DOWN_ARROW","NumericInput","props","state","value","onChange","bind","updateValue","onKeyDown","onWheel","nextProps","setState","e","keyCode","incrementValue","stopPropagation","preventDefault","deltaY","newValue","max","min","integerOnly","propsValue","updatedValue","Number","Math","floor","onUpdate","direction","defaultValue","step","stepmode","valueUpdate","x","parseFloat","absMode","showArrows","showSlider","editableClassName","placeholder","renderArrows","renderSlider","Component","propTypes","PropTypes","any","string","bool","number","func","isRequired","oneOfType","defaultProps"],"mappings":"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","file":"NumericInput.js","sourcesContent":["import EditableText from './EditableText';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport isNumeric from 'fast-isnumeric';\nimport Slider from 'react-rangeslider';\nimport {CarretDownIcon, CarretUpIcon} from 'plotly-icons';\n\nexport const UP_ARROW = 38;\nexport const DOWN_ARROW = 40;\n\nexport default class NumericInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {value: props.value};\n    this.onChange = this.onChange.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.state.value) {\n      this.setState({value: nextProps.value});\n    }\n  }\n\n  onKeyDown(e) {\n    switch (e.keyCode) {\n      case UP_ARROW:\n        this.incrementValue('increase');\n        break;\n      case DOWN_ARROW:\n        this.incrementValue('decrease');\n        break;\n      default:\n        break;\n    }\n  }\n\n  onWheel(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    if (e.deltaY > 0) {\n      this.incrementValue('increase');\n    } else {\n      this.incrementValue('decrease');\n    }\n  }\n\n  onChange(value) {\n    this.setState({value});\n  }\n\n  updateValue(newValue) {\n    const {max, min, integerOnly, value: propsValue} = this.props;\n    let updatedValue = newValue;\n\n    // When the user blurs on non-numeric data reset the component\n    // to the last known good value (this.props.value).\n    if (!isNumeric(updatedValue)) {\n      this.setState({value: propsValue});\n      return;\n    }\n\n    updatedValue = Number(updatedValue);\n    if (integerOnly) {\n      updatedValue = Math.floor(updatedValue);\n    }\n\n    if (isNumeric(min)) {\n      updatedValue = Math.max(min, updatedValue);\n    }\n\n    if (isNumeric(max)) {\n      updatedValue = Math.min(max, updatedValue);\n    }\n\n    this.props.onUpdate(updatedValue);\n  }\n\n  incrementValue(direction) {\n    const {defaultValue, min, step = 1, stepmode = 'absolute'} = this.props;\n    const {value} = this.state;\n\n    let valueUpdate;\n    if (isNumeric(value)) {\n      const x = parseFloat(value);\n      const absMode = stepmode === 'absolute';\n      if (direction === 'increase') {\n        valueUpdate = absMode ? x + step : x * (1 + step);\n      } else {\n        valueUpdate = absMode ? x - step : x / (1 + step);\n      }\n    } else {\n      // if we are multi-valued and the user is incrementing or decrementing\n      // update with some sane value so we can \"break\" out of multi-valued mode.\n      if (isNumeric(defaultValue)) {\n        valueUpdate = defaultValue;\n      } else {\n        // TODO smarter handling depending if user decrements or increments?\n        valueUpdate = min || 0;\n      }\n    }\n\n    // incrementers blur the line between blur and onChange.\n    this.updateValue(valueUpdate);\n  }\n\n  renderArrows() {\n    if (!this.props.showArrows || this.props.showSlider) {\n      return null;\n    }\n\n    return (\n      <div className=\"numeric-input__caret-box\">\n        <div\n          className=\"numeric-input__caret js-numeric-increase\"\n          onClick={this.incrementValue.bind(this, 'increase')}\n        >\n          <CarretUpIcon className=\"numeric-top-caret-modifier\" />\n        </div>\n        <div\n          className=\"numeric-input__caret js-numeric-decrease\"\n          onClick={this.incrementValue.bind(this, 'decrease')}\n        >\n          <CarretDownIcon className=\"numeric-bottom-caret-modifier\" />\n        </div>\n      </div>\n    );\n  }\n\n  renderSlider() {\n    if (!this.props.showSlider) {\n      return null;\n    }\n\n    return (\n      <Slider\n        min={this.props.min}\n        max={this.props.max}\n        step={this.props.step}\n        value={parseFloat(this.state.value)}\n        onChange={this.updateValue}\n        tooltip={false}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"numeric-input__wrapper\">\n        <EditableText\n          className={`numeric-input__number ${this.props.editableClassName}`}\n          placeholder={this.props.placeholder}\n          text={this.state.value}\n          type=\"text\"\n          onChange={this.onChange}\n          onUpdate={this.updateValue}\n          onKeyDown={this.onKeyDown}\n          onWheel={this.onWheel}\n        />\n        {this.renderArrows()}\n        {this.renderSlider()}\n      </div>\n    );\n  }\n}\n\nNumericInput.propTypes = {\n  defaultValue: PropTypes.any,\n  editableClassName: PropTypes.string,\n  integerOnly: PropTypes.bool,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  onUpdate: PropTypes.func.isRequired,\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  showArrows: PropTypes.bool,\n  showSlider: PropTypes.bool,\n  step: PropTypes.number,\n  stepmode: PropTypes.string,\n  value: PropTypes.any,\n};\n\nNumericInput.defaultProps = {\n  showArrows: true,\n};\n"]}