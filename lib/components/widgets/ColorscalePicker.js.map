{"version":3,"sources":["../../../src/components/widgets/ColorscalePicker.js"],"names":["Scale","props","state","selectedColorscaleType","initialCategory","showColorscalePicker","onChange","bind","onClick","setState","onColorscaleChange","selected","description","COLOR_PICKER_CONSTANTS","COLORSCALE_DESCRIPTIONS","colorscaleOptions","COLORSCALE_TYPES","filter","type","map","label","value","_","context","localize","onColorscaleTypeChange","Component","propTypes","PropTypes","func","array","string","contextType","EditorControlsContext"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,K;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8GACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,8BAAwBF,MAAMG,eAAN,IAAyB,YADtC;AAEXC,4BAAsB;AAFX,KAAb;;AAKA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaD,IAAb,OAAf;AATiB;AAUlB;;;;8BAES;AACR,WAAKE,QAAL,CAAc;AACZJ,8BAAsB,CAAC,KAAKH,KAAL,CAAWG;AADtB,OAAd;AAGD;;;6BAEQF,sB,EAAwB;AAC/B,WAAKM,QAAL,CAAc,EAACN,8CAAD,EAAd;AACD;;;6BAEQ;AAAA,mBACgC,KAAKF,KADrC;AAAA,UACAS,kBADA,UACAA,kBADA;AAAA,UACoBC,QADpB,UACoBA,QADpB;AAAA,mBAEgD,KAAKT,KAFrD;AAAA,UAEAC,sBAFA,UAEAA,sBAFA;AAAA,UAEwBE,oBAFxB,UAEwBA,oBAFxB;;AAGP,UAAMO,cAAcC,yCAAuBC,uBAAvB,CAA+CX,sBAA/C,CAApB;AACA,UAAMY,oBAAoBF,yCAAuBG,gBAAvB,CAAwCC,MAAxC,CACxB;AAAA,eAAQC,SAAS,QAAjB;AAAA,OADwB,EAExBC,GAFwB,CAEpB;AAAA,eAAS;AACbC,iBAAOF,OAAO,SADD;AAEbG,iBAAOH;AAFM,SAAT;AAAA,OAFoB,CAA1B;AAMA,UAAMI,IAAI,KAAKC,OAAL,CAAaC,QAAvB;;AAEA,aACE;AAAA;AAAA,UAAK,WAAU,8BAAf;AACE,sCAAC,4BAAD,IAAY,YAAYb,QAAxB,EAAkC,SAAS,KAAKH,OAAhD,GADF;AAGGH,+BACC;AAAA;AAAA,YAAK,WAAU,uBAAf;AACE,wCAAC,kBAAD;AACE,qBAASU,iBADX;AAEE,mBAAOZ,sBAFT;AAGE,sBAAU,KAAKG,QAHjB;AAIE,uBAAW,KAJb;AAKE,wBAAY,KALd;AAME,yBAAagB,EAAE,0BAAF;AANf,YADF;AASGV,wBACC;AAAC,2BAAD;AAAA;AACE,0CAAC,0BAAD;AACE,wBAAUF,kBADZ;AAEE,0BAAYC,QAFd;AAGE,qBAAO,GAHT;AAIE,8BAAgB,KAAKT,KAAL,CAAWC,sBAJ7B;AAKE,sCAAwB,KAAKsB,sBAL/B;AAME,yCANF;AAOE,2BAAa;AAPf,cADF;AAUE;AAAC,4BAAD;AAAA;AAAOb;AAAP;AAVF,WADD,GAaG;AAtBN,SADD,GAyBG;AA5BN,OADF;AAgCD;;;;EAnEiBc,gB;;AAsEpB1B,MAAM2B,SAAN,GAAkB;AAChBjB,sBAAoBkB,oBAAUC,IADd;AAEhBlB,YAAUiB,oBAAUE,KAFJ;AAGhBV,SAAOQ,oBAAUG,MAHD;AAIhB3B,mBAAiBwB,oBAAUG;AAJX,CAAlB;;AAOA/B,MAAMgC,WAAN,GAAoBC,8BAApB;;kBAEejC,K","file":"ColorscalePicker.js","sourcesContent":["import ColorscalePicker, {Colorscale, COLOR_PICKER_CONSTANTS} from 'react-colorscales';\nimport Dropdown from './Dropdown';\nimport Info from '../fields/Info';\nimport PropTypes from 'prop-types';\nimport React, {Component, Fragment} from 'react';\nimport {EditorControlsContext} from '../../context';\n\nclass Scale extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedColorscaleType: props.initialCategory || 'sequential',\n      showColorscalePicker: false,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.setState({\n      showColorscalePicker: !this.state.showColorscalePicker,\n    });\n  }\n\n  onChange(selectedColorscaleType) {\n    this.setState({selectedColorscaleType});\n  }\n\n  render() {\n    const {onColorscaleChange, selected} = this.props;\n    const {selectedColorscaleType, showColorscalePicker} = this.state;\n    const description = COLOR_PICKER_CONSTANTS.COLORSCALE_DESCRIPTIONS[selectedColorscaleType];\n    const colorscaleOptions = COLOR_PICKER_CONSTANTS.COLORSCALE_TYPES.filter(\n      type => type !== 'custom'\n    ).map(type => ({\n      label: type + ' scales',\n      value: type,\n    }));\n    const _ = this.context.localize;\n\n    return (\n      <div className=\"customPickerContainer__outer\">\n        <Colorscale colorscale={selected} onClick={this.onClick} />\n\n        {showColorscalePicker ? (\n          <div className=\"customPickerContainer\">\n            <Dropdown\n              options={colorscaleOptions}\n              value={selectedColorscaleType}\n              onChange={this.onChange}\n              clearable={false}\n              searchable={false}\n              placeholder={_('Select a Colorscale Type')}\n            />\n            {description ? (\n              <Fragment>\n                <ColorscalePicker\n                  onChange={onColorscaleChange}\n                  colorscale={selected}\n                  width={215}\n                  colorscaleType={this.state.selectedColorscaleType}\n                  onColorscaleTypeChange={this.onColorscaleTypeChange}\n                  disableSwatchControls\n                  scaleLength={7}\n                />\n                <Info>{description}</Info>\n              </Fragment>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nScale.propTypes = {\n  onColorscaleChange: PropTypes.func,\n  selected: PropTypes.array,\n  label: PropTypes.string,\n  initialCategory: PropTypes.string,\n};\n\nScale.contextType = EditorControlsContext;\n\nexport default Scale;\n"]}