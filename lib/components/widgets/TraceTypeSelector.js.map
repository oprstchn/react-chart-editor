{"version":3,"sources":["../../../src/components/widgets/TraceTypeSelector.js"],"names":["renderActionItems","actionItems","item","map","action","i","onClick","label","icon","Item","active","handleClick","actions","showActions","complex","value","SimpleIcon","ComplexIcon","propTypes","PropTypes","object","bool","func","TraceTypeSelector","props","selectAndClose","bind","renderCategories","renderGrid","renderSingleBlock","updateContainer","glByDefault","type","fullContainer","computedValue","endsWith","TRACES_WITH_GL","includes","context","handleClose","_","localize","chartHelp","e","stopPropagation","feedQuery","window","open","helpDoc","examplePlot","fullValue","mapBoxAccess","traceTypesConfig","traces","categories","category","items","filter","MAX_ITEMS","columnClasses","length","maxColumns","Boolean","display","Component","string","contextTypes","TraceTypeSelectorButton","container","inferredType","find","Icon","isRequired","contextType","EditorControlsContext"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,WAAD,EAAcC,IAAd;AAAA,SACxBD,cACIA,YAAYC,IAAZ,EAAkBC,GAAlB,CACE,UAACC,MAAD,EAASC,CAAT;AAAA,WACE,CAACD,OAAOE,OAAR,GAAkB,IAAlB,GACE;AAAA;AAAA;AACE,mBAAU,2BADZ;AAEE,aAAKD,CAFP;AAGE,sBAAYD,OAAOG,KAHrB;AAIE,4CAJF;AAKE,cAAK,SALP;AAME,iBAASH,OAAOE,OANlB;AAOE,gBAAO;AAPT;AASGF,aAAOI;AATV,KAFJ;AAAA,GADF,CADJ,GAiBI,IAlBoB;AAAA,CAA1B;;AAoBA,IAAMC,OAAO,SAAPA,IAAO,OAAgE;AAAA,MAA9DP,IAA8D,QAA9DA,IAA8D;AAAA,MAAxDQ,MAAwD,QAAxDA,MAAwD;AAAA,MAAhDC,WAAgD,QAAhDA,WAAgD;AAAA,MAAnCC,OAAmC,QAAnCA,OAAmC;AAAA,MAA1BC,WAA0B,QAA1BA,WAA0B;AAAA,MAAbC,OAAa,QAAbA,OAAa;AAAA,MACpEP,KADoE,GAC9CL,IAD8C,CACpEK,KADoE;AAAA,MAC7DQ,KAD6D,GAC9Cb,IAD8C,CAC7Da,KAD6D;AAAA,MACtDP,IADsD,GAC9CN,IAD8C,CACtDM,IADsD;;AAE3E,MAAMQ,aAAa,0BAAgBR,OAAOA,IAAP,GAAcO,KAA9B,CAAnB;AACA,MAAME,cAAc,0BAAgBT,OAAOA,IAAP,GAAcO,KAA9B,EAAqC,WAArC,CAApB;;AAEA,SACE;AAAA;AAAA,MAAK,2BAAwBL,SAAS,qBAAT,GAAiC,EAAzD,CAAL,EAAoE,SAASC,WAA7E;AACE;AAAA;AAAA,QAAK,WAAU,qBAAf;AACGC,iBAAWC,WAAX,GAAyBb,kBAAkBY,OAAlB,EAA2BV,IAA3B,CAAzB,GAA4D;AAD/D,KADF;AAIE;AAAA;AAAA,QAAK,WAAU,mBAAf;AACG,OAACY,OAAD,IACC;AAAA;AAAA,UAAK,WAAU,wBAAf;AACE,sCAAC,UAAD;AADF,OAFJ;AAMGA,iBACC;AAAA;AAAA,UAAK,WAAU,4BAAf;AACE,sCAAC,WAAD;AADF;AAPJ,KAJF;AAgBE;AAAA;AAAA,QAAK,WAAU,mBAAf;AAAoCP;AAApC;AAhBF,GADF;AAoBD,CAzBD;;AA2BAE,KAAKS,SAAL,GAAiB;AACfhB,QAAMiB,oBAAUC,MADD;AAEfV,UAAQS,oBAAUE,IAFH;AAGfP,WAASK,oBAAUE,IAHJ;AAIfV,eAAaQ,oBAAUG,IAJR;AAKfV,WAASO,oBAAUG,IALJ;AAMfT,eAAaM,oBAAUE;AANR,CAAjB;AAQA;;IAEME,iB;;;AACJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,sIACXA,KADW;;AAGjB,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,OAAtB;AACA,UAAKd,OAAL,GAAe,MAAKA,OAAL,CAAac,IAAb,OAAf;AACA,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;AACA,UAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBF,IAAhB,OAAlB;AACA,UAAKG,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBH,IAAvB,OAAzB;AAPiB;AAQlB;;;;mCAEcX,K,EAAO;AAAA,mBAKhB,KAAKS,KALW;AAAA,UAElBM,eAFkB,UAElBA,eAFkB;AAAA,UAGlBC,WAHkB,UAGlBA,WAHkB;AAAA,UAIFC,IAJE,UAIlBC,aAJkB,CAIFD,IAJE;;AAMpB,UAAME,gBAAgB,sCAA4BnB,KAA5B,CAAtB;AACA,UACE,CAAEiB,QAAQA,KAAKG,QAAL,CAAc,IAAd,CAAT,IAAkC,CAACC,0BAAeC,QAAf,CAAwBL,IAAxB,CAAD,IAAkCD,WAArE,KACAK,0BAAeC,QAAf,CAAwBH,cAAcF,IAAtC,CADA,IAEA,CAACE,cAAcF,IAAd,CAAmBG,QAAnB,CAA4B,IAA5B,CAHH,EAIE;AACAD,sBAAcF,IAAd,IAAsB,IAAtB;AACD;AACDF,sBAAgBI,aAAhB;AACA,WAAKI,OAAL,CAAaC,WAAb;AACD;;;mCAEgB;AAAA;;AAAA,UAARxB,KAAQ,SAARA,KAAQ;AAAA,qBACkB,KAAKuB,OADvB;AAAA,UACEE,CADF,YACRC,QADQ;AAAA,UACKC,SADL,YACKA,SADL;;;AAGf,UAAMpC,UAAU,SAAVA,OAAU,CAACqC,CAAD,EAAIrB,IAAJ,EAAa;AAC3BqB,UAAEC,eAAF;AACAtB;AACA,eAAKgB,OAAL,CAAaC,WAAb;AACD,OAJD;;AAMA,aAAO,CACL;AACEhC,eAAOiC,EAAE,mCAAF,CADT;AAEElC,iBACEoC,UAAU3B,KAAV,KACA2B,UAAU3B,KAAV,EAAiB8B,SADjB,IAEC;AAAA,iBACCvC,QAAQqC,CAAR,EAAW;AAAA,mBACTG,OAAOC,IAAP,+BAC6BL,UAAU3B,KAAV,IAAmB2B,UAAU3B,KAAV,EAAiB8B,SAApC,GAAgD9B,KAD7E,GAEE,QAFF,CADS;AAAA,WAAX,CADD;AAAA,SALL;AAYEP,cAAM,8BAAC,uBAAD;AAZR,OADK,EAeL;AACED,eAAOiC,EAAE,oCAAF,CADT;AAEElC,iBACEoC,UAAU3B,KAAV,KACA2B,UAAU3B,KAAV,EAAiBiC,OADjB,IAEC;AAAA,iBAAK1C,QAAQqC,CAAR,EAAW;AAAA,mBAAMG,OAAOC,IAAP,CAAYL,UAAU3B,KAAV,EAAiBiC,OAA7B,EAAsC,QAAtC,CAAN;AAAA,WAAX,CAAL;AAAA,SALL;AAMExC,cAAM,8BAAC,6BAAD;AANR,OAfK,EAuBL;AACED,eAAOiC,EAAE,sBAAF,CADT;AAEElC,iBACEoC,UAAU3B,KAAV,KACA2B,UAAU3B,KAAV,EAAiBkC,WADjB,IAEC;AAAA,iBAAK3C,QAAQqC,CAAR,EAAWD,UAAU3B,KAAV,EAAiBkC,WAA5B,CAAL;AAAA,SALL;AAMEzC,cAAM,8BAAC,sBAAD;AANR,OAvBK,CAAP;AAgCD;;;uCAEkB;AAAA;;AAAA,UACV0C,SADU,GACG,KAAK1B,KADR,CACV0B,SADU;AAAA,sBAE8B,KAAKZ,OAFnC;AAAA,UAEVa,YAFU,aAEVA,YAFU;AAAA,UAEcX,CAFd,aAEIC,QAFJ;AAAA,UAEiBC,SAFjB,aAEiBA,SAFjB;AAAA,kCAKb,KAAKlB,KALQ,CAIf4B,gBAJe;AAAA,UAIIC,MAJJ,yBAIIA,MAJJ;AAAA,UAIYC,UAJZ,yBAIYA,UAJZ;AAAA,UAIwBxC,OAJxB,yBAIwBA,OAJxB;;;AAOjB,aAAOwC,WAAWd,CAAX,EAAcrC,GAAd,CAAkB,UAACoD,QAAD,EAAWlD,CAAX,EAAiB;AACxC,YAAImD,QAAQH,OAAOb,CAAP,EACTiB,MADS,CACF;AAAA,cAAa1C,KAAb,SAAEwC,QAAF,CAAaxC,KAAb;AAAA,iBAAyBA,UAAUwC,SAASxC,KAA5C;AAAA,SADE,EAET0C,MAFS,CAEF;AAAA,iBAAKpD,EAAEU,KAAF,KAAY,WAAZ,IAA2BV,EAAEU,KAAF,KAAY,gBAA5C;AAAA,SAFE,CAAZ;;AAIA,YAAI,CAACoC,YAAL,EAAmB;AACjBK,kBAAQA,MAAMC,MAAN,CAAa;AAAA,mBAAKpD,EAAEU,KAAF,KAAY,eAAjB;AAAA,WAAb,CAAR;AACD;;AAED,YAAM2C,YAAY,CAAlB;;AAEA,YAAMC,gBACHH,MAAMI,MAAN,GAAeF,SAAf,IAA4B,CAACH,SAASM,UAAvC,IACCN,SAASM,UAAT,IAAuBN,SAASM,UAAT,GAAsB,CAD9C,GAEI,+CAFJ,GAGI,oBAJN;;AAMA,eACE;AAAA;AAAA,YAAK,WAAWF,aAAhB,EAA+B,KAAKtD,CAApC;AACE;AAAA;AAAA,cAAK,WAAU,4BAAf;AAA6CkD,qBAAShD;AAAtD,WADF;AAEE;AAAA;AAAA,cAAK,WAAU,2BAAf;AACGiD,kBAAMrD,GAAN,CAAU;AAAA,qBACT,8BAAC,IAAD;AACE,yBAASW,OADX;AAEE,qBAAKZ,KAAKa,KAFZ;AAGE,wBAAQmC,cAAchD,KAAKa,KAH7B;AAIE,sBAAMb,IAJR;AAKE,yBAAS,OAAKU,OALhB;AAME,6BAAa;AAAA,yBAAM,OAAKa,cAAL,CAAoBvB,KAAKa,KAAzB,CAAN;AAAA,iBANf;AAOE,6BAAa+C,QAAQpB,SAAR;AAPf,gBADS;AAAA,aAAV;AADH;AAFF,SADF;AAkBD,OAnCM,CAAP;AAoCD;;;iCAEY;AACX,aAAO;AAAA;AAAA,UAAK,WAAU,YAAf;AAA6B,aAAKf,gBAAL;AAA7B,OAAP;AACD;;;wCAEmB;AAAA;;AAAA,UACXuB,SADW,GACE,KAAK1B,KADP,CACX0B,SADW;AAAA,UAEDV,CAFC,GAEI,KAAKF,OAFT,CAEXG,QAFW;AAAA,mCAKd,KAAKjB,KALS,CAIhB4B,gBAJgB;AAAA,UAIGC,MAJH,0BAIGA,MAJH;AAAA,UAIWvC,OAJX,0BAIWA,OAJX;;;AAOlB,aACE;AAAA;AAAA,UAAK,WAAU,yBAAf;AACGuC,eAAOb,CAAP,EAAUrC,GAAV,CAAc;AAAA,iBACb,8BAAC,IAAD;AACE,iBAAKD,KAAKa,KADZ;AAEE,qBAASD,OAFX;AAGE,oBAAQoC,cAAchD,KAAKa,KAH7B;AAIE,kBAAMb,IAJR;AAKE,qBAAS,OAAKU,OALhB;AAME,yBAAa,KANf;AAOE,yBAAa;AAAA,qBAAM,OAAKa,cAAL,CAAoBvB,KAAKa,KAAzB,CAAN;AAAA,aAPf;AAQE,mBAAO,EAACgD,SAAS,cAAV;AART,YADa;AAAA,SAAd;AADH,OADF;AAgBD;;;6BAEQ;AAAA,UACUvB,CADV,GACe,KAAKF,OADpB,CACAG,QADA;AAAA,UAGca,UAHd,GAIH,KAAK9B,KAJF,CAGL4B,gBAHK,CAGcE,UAHd;;;AAMP,aACE;AAAC,uBAAD;AAAA,UAAO,OAAOd,EAAE,mBAAF,CAAd;AACGc,qBAAa,KAAK1B,UAAL,EAAb,GAAiC,KAAKC,iBAAL;AADpC,OADF;AAKD;;;;EA7J6BmC,gB;;AAgKhCzC,kBAAkBL,SAAlB,GAA8B;AAC5BY,mBAAiBX,oBAAUG,IADC;AAE5B4B,aAAW/B,oBAAU8C,MAFO;AAG5BhC,iBAAed,oBAAUC,MAHG;AAI5BW,eAAaZ,oBAAUE,IAJK;AAK5B+B,oBAAkBjC,oBAAUC;AALA,CAA9B;AAOAG,kBAAkB2C,YAAlB,GAAiC;AAC/B3B,eAAapB,oBAAUG,IADQ;AAE/BmB,YAAUtB,oBAAUG,IAFW;AAG/B6B,gBAAchC,oBAAUE,IAHO;AAI/BqB,aAAWvB,oBAAUC;AAJU,CAAjC;;IAOa+C,uB,WAAAA,uB;;;;;;;;;;;6BACF;AAAA,oBAKH,KAAK3C,KALF;AAAA,UAELb,WAFK,WAELA,WAFK;AAAA,UAGLyD,SAHK,WAGLA,SAHK;AAAA,UAIcf,MAJd,WAILD,gBAJK,CAIcC,MAJd;AAAA,UAOUb,CAPV,GAOe,KAAKF,OAPpB,CAOAG,QAPA;;;AASP,UAAM4B,eAAe,mCAAyBD,SAAzB,CAArB;;AATO,yBAUsBf,OAAOb,CAAP,EAAU8B,IAAV,CAAe;AAAA,eAAQtC,KAAKjB,KAAL,KAAesD,YAAvB;AAAA,OAAf,CAVtB;AAAA,UAUA9D,KAVA,gBAUAA,KAVA;AAAA,UAUOC,IAVP,gBAUOA,IAVP;AAAA,UAUaO,KAVb,gBAUaA,KAVb;;AAYP,UAAMwD,OAAO,0BAAgB/D,OAAOA,IAAP,GAAcO,KAA9B,CAAb;;AAEA,aACE;AAAA;AAAA,UAAK,WAAU,0BAAf,EAA0C,SAASJ,cAAcA,WAAd,GAA4B,IAA/E;AACE;AAAA;AAAA,YAAK,WAAU,gCAAf;AACE,wCAAC,IAAD;AADF,SADF;AAIGJ;AAJH,OADF;AAQD;;;;EAvB0CyD,gB;;AA0B7CG,wBAAwBjD,SAAxB,GAAoC;AAClCP,eAAaQ,oBAAUG,IAAV,CAAekD,UADM;AAElCJ,aAAWjD,oBAAUC,MAFa;AAGlCgC,oBAAkBjC,oBAAUC,MAAV,CAAiBoD;AAHD,CAApC;AAKAL,wBAAwBM,WAAxB,GAAsCC,+BAAtC;;kBAEenD,iB","file":"TraceTypeSelector.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {SearchIcon, ThumnailViewIcon, GraphIcon} from 'plotly-icons';\nimport Modal from 'components/containers/Modal';\nimport {traceTypeToPlotlyInitFigure, renderTraceIcon, plotlyTraceToCustomTrace} from 'lib';\nimport {TRACES_WITH_GL} from 'lib/constants';\nimport {EditorControlsContext} from '../../context';\n\nconst renderActionItems = (actionItems, item) =>\n  actionItems\n    ? actionItems(item).map(\n        (action, i) =>\n          !action.onClick ? null : (\n            <a\n              className=\"trace-item__actions__item\"\n              key={i}\n              aria-label={action.label}\n              data-microtip-position={`top-left`}\n              role=\"tooltip\"\n              onClick={action.onClick}\n              target=\"_blank\"\n            >\n              {action.icon}\n            </a>\n          )\n      )\n    : null;\n\nconst Item = ({item, active, handleClick, actions, showActions, complex}) => {\n  const {label, value, icon} = item;\n  const SimpleIcon = renderTraceIcon(icon ? icon : value);\n  const ComplexIcon = renderTraceIcon(icon ? icon : value, 'TraceType');\n\n  return (\n    <div className={`trace-item${active ? ' trace-item--active' : ''}`} onClick={handleClick}>\n      <div className=\"trace-item__actions\">\n        {actions && showActions ? renderActionItems(actions, item) : null}\n      </div>\n      <div className=\"trace-item__image\">\n        {!complex && (\n          <div className=\"trace-item__image__svg\">\n            <SimpleIcon />\n          </div>\n        )}\n        {complex && (\n          <div className=\"trace-item__image__wrapper\">\n            <ComplexIcon />\n          </div>\n        )}\n      </div>\n      <div className=\"trace-item__label\">{label}</div>\n    </div>\n  );\n};\n\nItem.propTypes = {\n  item: PropTypes.object,\n  active: PropTypes.bool,\n  complex: PropTypes.bool,\n  handleClick: PropTypes.func,\n  actions: PropTypes.func,\n  showActions: PropTypes.bool,\n};\n// Item.contextType = EditorControlsContext;\n\nclass TraceTypeSelector extends Component {\n  constructor(props) {\n    super(props);\n\n    this.selectAndClose = this.selectAndClose.bind(this);\n    this.actions = this.actions.bind(this);\n    this.renderCategories = this.renderCategories.bind(this);\n    this.renderGrid = this.renderGrid.bind(this);\n    this.renderSingleBlock = this.renderSingleBlock.bind(this);\n  }\n\n  selectAndClose(value) {\n    const {\n      updateContainer,\n      glByDefault,\n      fullContainer: {type},\n    } = this.props;\n    const computedValue = traceTypeToPlotlyInitFigure(value);\n    if (\n      ((type && type.endsWith('gl')) || (!TRACES_WITH_GL.includes(type) && glByDefault)) &&\n      TRACES_WITH_GL.includes(computedValue.type) &&\n      !computedValue.type.endsWith('gl')\n    ) {\n      computedValue.type += 'gl';\n    }\n    updateContainer(computedValue);\n    this.context.handleClose();\n  }\n\n  actions({value}) {\n    const {localize: _, chartHelp} = this.context;\n\n    const onClick = (e, func) => {\n      e.stopPropagation();\n      func();\n      this.context.handleClose();\n    };\n\n    return [\n      {\n        label: _('Charts like this by Plotly users.'),\n        onClick:\n          chartHelp[value] &&\n          chartHelp[value].feedQuery &&\n          (e =>\n            onClick(e, () =>\n              window.open(\n                `https://plot.ly/feed/?q=${chartHelp[value] ? chartHelp[value].feedQuery : value}`,\n                '_blank'\n              )\n            )),\n        icon: <SearchIcon />,\n      },\n      {\n        label: _('View tutorials on this chart type.'),\n        onClick:\n          chartHelp[value] &&\n          chartHelp[value].helpDoc &&\n          (e => onClick(e, () => window.open(chartHelp[value].helpDoc, '_blank'))),\n        icon: <ThumnailViewIcon />,\n      },\n      {\n        label: _('See a basic example.'),\n        onClick:\n          chartHelp[value] &&\n          chartHelp[value].examplePlot &&\n          (e => onClick(e, chartHelp[value].examplePlot)),\n        icon: <GraphIcon />,\n      },\n    ];\n  }\n\n  renderCategories() {\n    const {fullValue} = this.props;\n    const {mapBoxAccess, localize: _, chartHelp} = this.context;\n    const {\n      traceTypesConfig: {traces, categories, complex},\n    } = this.props;\n\n    return categories(_).map((category, i) => {\n      let items = traces(_)\n        .filter(({category: {value}}) => value === category.value)\n        .filter(i => i.value !== 'scattergl' && i.value !== 'scatterpolargl');\n\n      if (!mapBoxAccess) {\n        items = items.filter(i => i.value !== 'scattermapbox');\n      }\n\n      const MAX_ITEMS = 4;\n\n      const columnClasses =\n        (items.length > MAX_ITEMS && !category.maxColumns) ||\n        (category.maxColumns && category.maxColumns > 1)\n          ? 'trace-grid__column trace-grid__column--double'\n          : 'trace-grid__column';\n\n      return (\n        <div className={columnClasses} key={i}>\n          <div className=\"trace-grid__column__header\">{category.label}</div>\n          <div className=\"trace-grid__column__items\">\n            {items.map(item => (\n              <Item\n                complex={complex}\n                key={item.value}\n                active={fullValue === item.value}\n                item={item}\n                actions={this.actions}\n                handleClick={() => this.selectAndClose(item.value)}\n                showActions={Boolean(chartHelp)}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    });\n  }\n\n  renderGrid() {\n    return <div className=\"trace-grid\">{this.renderCategories()}</div>;\n  }\n\n  renderSingleBlock() {\n    const {fullValue} = this.props;\n    const {localize: _} = this.context;\n    const {\n      traceTypesConfig: {traces, complex},\n    } = this.props;\n\n    return (\n      <div className=\"trace-grid-single-block\">\n        {traces(_).map(item => (\n          <Item\n            key={item.value}\n            complex={complex}\n            active={fullValue === item.value}\n            item={item}\n            actions={this.actions}\n            showActions={false}\n            handleClick={() => this.selectAndClose(item.value)}\n            style={{display: 'inline-block'}}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    const {localize: _} = this.context;\n    const {\n      traceTypesConfig: {categories},\n    } = this.props;\n\n    return (\n      <Modal title={_('Select Trace Type')}>\n        {categories ? this.renderGrid() : this.renderSingleBlock()}\n      </Modal>\n    );\n  }\n}\n\nTraceTypeSelector.propTypes = {\n  updateContainer: PropTypes.func,\n  fullValue: PropTypes.string,\n  fullContainer: PropTypes.object,\n  glByDefault: PropTypes.bool,\n  traceTypesConfig: PropTypes.object,\n};\nTraceTypeSelector.contextTypes = {\n  handleClose: PropTypes.func,\n  localize: PropTypes.func,\n  mapBoxAccess: PropTypes.bool,\n  chartHelp: PropTypes.object,\n};\n\nexport class TraceTypeSelectorButton extends Component {\n  render() {\n    const {\n      handleClick,\n      container,\n      traceTypesConfig: {traces},\n    } = this.props;\n\n    const {localize: _} = this.context;\n\n    const inferredType = plotlyTraceToCustomTrace(container);\n    const {label, icon, value} = traces(_).find(type => type.value === inferredType);\n\n    const Icon = renderTraceIcon(icon ? icon : value);\n\n    return (\n      <div className=\"trace-type-select-button\" onClick={handleClick ? handleClick : null}>\n        <div className=\"trace-type-select-button__icon\">\n          <Icon />\n        </div>\n        {label}\n      </div>\n    );\n  }\n}\n\nTraceTypeSelectorButton.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  container: PropTypes.object,\n  traceTypesConfig: PropTypes.object.isRequired,\n};\nTraceTypeSelectorButton.contextType = EditorControlsContext;\n\nexport default TraceTypeSelector;\n"]}