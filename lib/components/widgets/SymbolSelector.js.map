{"version":3,"sources":["../../../src/components/widgets/SymbolSelector.js"],"names":["SymbolSelector","props","state","isOpen","togglePanel","bind","nextProps","nextState","markerColor","borderColor","nextMarkerColor","nextBorderColor","value","setState","symbolOptions","currentSymbol","find","symbol","paddingTop","paddingLeft","symbolStyle","stroke","fill","strokeOpacity","strokeWidth","label","map","option","onChange","toggleClass","backgroundDark","renderActiveOption","renderOptions","Component","propTypes","PropTypes","bool","string","func","array"],"mappings":"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","file":"SymbolSelector.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport {CarretDownIcon} from 'plotly-icons';\n\nexport default class SymbolSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n    this.togglePanel = this.togglePanel.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const {markerColor, borderColor} = this.props;\n    const {markerColor: nextMarkerColor, borderColor: nextBorderColor} = nextProps;\n\n    return (\n      this.props.value !== nextProps.value ||\n      this.state.isOpen !== nextState.isOpen ||\n      markerColor !== nextMarkerColor ||\n      borderColor !== nextBorderColor\n    );\n  }\n\n  togglePanel() {\n    this.setState({isOpen: !this.state.isOpen});\n  }\n\n  renderActiveOption() {\n    const {markerColor, borderColor, symbolOptions, value} = this.props;\n    const currentSymbol = symbolOptions.find(symbol => symbol.value === value);\n    if (!currentSymbol) {\n      return (\n        <span\n          style={{\n            paddingTop: '5px',\n            paddingLeft: '15px',\n          }}\n        >\n          {'-'}\n        </span>\n      );\n    }\n\n    const symbolStyle = {\n      stroke: currentSymbol.fill === 'none' ? markerColor : borderColor,\n      strokeOpacity: '1',\n      strokeWidth: '2px',\n      fill: currentSymbol.fill === 'none' ? 'none' : markerColor,\n    };\n\n    return (\n      <span>\n        <svg width=\"18\" height=\"18\">\n          <g transform=\"translate(8,8)\">\n            <path d={currentSymbol.label} style={symbolStyle} />\n          </g>\n        </svg>\n      </span>\n    );\n  }\n\n  renderOptions() {\n    const {markerColor, borderColor, symbolOptions} = this.props;\n    return symbolOptions.map(option => {\n      const {fill, value, label} = option;\n\n      const symbolStyle = {\n        stroke: fill === 'none' ? markerColor : borderColor,\n        strokeOpacity: '1',\n        strokeWidth: '2px',\n        fill: fill === 'none' ? 'none' : markerColor,\n      };\n      return (\n        <div\n          className=\"symbol-selector__item\"\n          key={value}\n          onClick={() => this.props.onChange(value)}\n        >\n          <svg width=\"28\" height=\"28\" className=\"symbol-selector__symbol\" data-value={value}>\n            <g transform=\"translate(14,14)\">\n              <path d={label} style={symbolStyle} />\n            </g>\n          </svg>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const {isOpen} = this.state;\n    const toggleClass = classnames('symbol-selector__toggle', {\n      'symbol-selector__toggle--dark': this.props.backgroundDark,\n    });\n\n    return (\n      <div>\n        <div className={toggleClass} onClick={this.togglePanel}>\n          <span className=\"symbol-selector__toggle_option\">{this.renderActiveOption()}</span>\n          <span>\n            <CarretDownIcon className=\"symbol-selector__toggle__caret\" />\n          </span>\n        </div>\n        {isOpen && this.renderOptions()}\n      </div>\n    );\n  }\n}\n\nSymbolSelector.propTypes = {\n  backgroundDark: PropTypes.bool,\n  markerColor: PropTypes.string,\n  borderColor: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  symbolOptions: PropTypes.array,\n};\n"]}