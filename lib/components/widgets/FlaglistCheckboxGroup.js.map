{"version":3,"sources":["../../../src/components/widgets/FlaglistCheckboxGroup.js"],"names":["FlaglistCheckboxGroup","props","currentActiveOption","activeOption","state","parseFlags","handleChange","bind","option","options","map","o","value","join","nextProps","setState","newOptions","newActiveOptions","checked","slice","length","onChange","activeOptions","split","allOptions","currentChecked","indexOf","push","label","renderCheckedOption","className","orientation","Component","propTypes","PropTypes","arrayOf","shape","any","isRequired","string","func"],"mappings":"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","file":"FlaglistCheckboxGroup.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport CheckboxGroup from './CheckboxGroup';\n\n// Component handles activeOption with shape \"x+y+z\"\n// and ties it to the CheckboxGroup Component\nclass FlaglistCheckboxGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    let currentActiveOption;\n    if (props.activeOption !== null) {\n      currentActiveOption = props.activeOption;\n    } else {\n      currentActiveOption = '';\n    }\n\n    this.state = {\n      activeOption: this.parseFlags(currentActiveOption),\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // convert plotly.js's \"all\" or \"none\" option in its `flaglist` type\n  // to a series of options separated by `+` that our component can handle\n  parseFlags(option) {\n    let activeOption;\n    if (option === 'all') {\n      activeOption = this.props.options.map(o => o.value).join('+');\n    } else if (option === 'none') {\n      activeOption = '';\n    } else {\n      activeOption = option;\n    }\n    return activeOption;\n  }\n\n  // Sync local state to parent props.\n  componentWillReceiveProps(nextProps) {\n    this.setState({activeOption: this.parseFlags(nextProps.activeOption)});\n  }\n\n  // Called whenever a checkbox is changed, this updates the local\n  // state to reflect the new activeOptions and then called props.onChange with\n  // the new options.\n  handleChange(newOptions) {\n    let newActiveOptions = '';\n\n    newOptions.map(option => {\n      if (option.checked === true) {\n        newActiveOptions += option.value + '+';\n      }\n    });\n\n    newActiveOptions = newActiveOptions.slice(0, -1);\n\n    if (newActiveOptions.length === 0) {\n      newActiveOptions = 'none';\n    }\n\n    this.setState({activeOption: newActiveOptions});\n    this.props.onChange(newActiveOptions);\n  }\n\n  // Turns the activeOptions \"e.g \"x+y+z\" into an array that\n  // the CheckboxGroup component can handle\n  renderCheckedOption() {\n    const activeOptions =\n      typeof this.state.activeOption === 'string'\n        ? this.state.activeOption.split('+')\n        : [this.state.activeOption];\n    const allOptions = this.props.options;\n    const newOptions = [];\n\n    allOptions.map(option => {\n      let currentChecked;\n\n      if (activeOptions.indexOf(option.value) > -1) {\n        currentChecked = true;\n      } else {\n        currentChecked = false;\n      }\n\n      newOptions.push({\n        label: option.label,\n        value: option.value,\n        checked: currentChecked,\n      });\n    });\n\n    return newOptions;\n  }\n\n  render() {\n    return (\n      <CheckboxGroup\n        options={this.renderCheckedOption()}\n        onChange={this.handleChange}\n        className={this.props.className}\n        orientation={this.props.orientation}\n      />\n    );\n  }\n}\n\nFlaglistCheckboxGroup.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.any.isRequired,\n      label: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  activeOption: PropTypes.any,\n  onChange: PropTypes.func,\n  className: PropTypes.string,\n  orientation: PropTypes.string,\n};\n\nexport default FlaglistCheckboxGroup;\n"]}