{"version":3,"sources":["../../../src/components/widgets/ColorPicker.js"],"names":["extractRGB","c","rgb","getColorSource","source","hex","toTinyColor","Custom","onChangeComplete","props","Component","propTypes","PropTypes","object","func","CustomColorPicker","ColorPicker","state","isVisible","onSelectedColorChange","bind","toggleVisible","newColor","color","onColorChange","toRgbString","setState","selectedColor","colorText","toHexString","rgbString","_a","_r","_g","_b","swatchStyle","backgroundColor","isRequired","string"],"mappings":"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","file":"ColorPicker.js","sourcesContent":["import Fields from 'react-color/lib/components/sketch/SketchFields';\nimport React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport tinycolor from 'tinycolor2';\nimport {Hue, Saturation} from 'react-color/lib/components/common';\nimport {CustomPicker as customPicker} from 'react-color';\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nconst extractRGB = c => c.rgb || c;\nconst getColorSource = c => (c.source === 'hex' ? c.hex : extractRGB(c));\nconst toTinyColor = c => tinycolor(getColorSource(c));\n\nclass Custom extends Component {\n  render() {\n    const {onChangeComplete} = this.props;\n\n    return (\n      <div className=\"colorpicker__outer\">\n        <div className=\"colorpicker__controls +flex\">\n          <div className=\"colorpicker__sliders\">\n            <div className=\"colorpicker__slider\">\n              <Hue {...this.props} />\n            </div>\n          </div>\n        </div>\n        <div className=\"colorpicker__saturation\">\n          <Saturation {...this.props} />\n        </div>\n        <div className=\"colorpicker__custom-input\">\n          <Fields {...this.props} onChange={onChangeComplete} />\n        </div>\n      </div>\n    );\n  }\n}\n\nCustom.propTypes = {\n  rgb: PropTypes.object,\n  onChangeComplete: PropTypes.func,\n};\n\nconst CustomColorPicker = customPicker(Custom);\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n    };\n\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  onSelectedColorChange(newColor) {\n    // We use our own toTinyColor because this value is a ColorPicker\n    // color value which is an object that needs unpacking. We also handle\n    // the case where a color string is passed in (just in case).\n    const color = toTinyColor(newColor);\n\n    // relayout call only wants a RGB String\n    this.props.onColorChange(color.toRgbString());\n  }\n\n  toggleVisible() {\n    this.setState({isVisible: !this.state.isVisible});\n  }\n\n  render() {\n    // We use tinycolor here instead of our own toTinyColor as\n    // tinycolor handles `null` values and other weirdness we may\n    // expect from user data.\n    const selectedColor = tinycolor(this.props.selectedColor);\n    const colorText = selectedColor.toHexString();\n\n    // Convert rgba to rgb if necessary\n    const rgbString =\n      selectedColor._a !== 0\n        ? selectedColor.toRgbString()\n        : `rgb(${selectedColor._r},${selectedColor._g},${selectedColor._b})`;\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = {backgroundColor: rgbString};\n\n    return (\n      <Fragment>\n        <div className=\"colorpicker__container\">\n          <div className=\"colorpicker\">\n            <div\n              className=\"colorpicker__swatch +cursor-clickable\"\n              style={swatchStyle}\n              onClick={this.toggleVisible}\n            />\n          </div>\n\n          <div className=\"colorpicker__selected-color +hover-grey\" onClick={this.toggleVisible}>\n            {colorText}\n          </div>\n        </div>\n\n        {this.state.isVisible && (\n          <CustomColorPicker color={rgbString} onChangeComplete={this.onSelectedColorChange} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n};\n\nexport default ColorPicker;\n"]}