{"version":3,"sources":["../../../../../src/components/widgets/text_editors/RichText/DraftCommands.js"],"names":["cursorHasLink","getEntityByKey","getEntityKeyAt","handleKeyCommand","insertSoftNewline","toggleInlineStyle","toggleLink","toggleMutuallyExclusiveStyles","selectionHasLink","editorState","selection","isCollapsed","entity","Boolean","get","LINK","entityKey","Entity","blockStartKey","getStartKey","selectionOffset","getStartOffset","contentState","getCurrentContent","block","getBlockForKey","getEntityAt","command","BOLD","ITALIC","newEditorState","currentStyleSet","getCurrentInlineStyle","reduce","reducedEditorState","style","RichUtils","selectionState","getSelection","selectionStart","selectionEnd","getEndOffset","EditorState","push","inlineStyle","updatedEditorState","create","url","SUBSCRIPT","includes","SUPERSCRIPT"],"mappings":"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","file":"DraftCommands.js","sourcesContent":["/*\n * This module exports functions that act on a DraftJS EditorState to\n * effect commands.\n */\n\nimport {\n  EditorState,\n  Entity,\n  RichUtils,\n\n  // Note: disable eslint cause SelectionState is mentioned quite often in JSDoc\n  // eslint-disable-next-line no-unused-vars\n  SelectionState,\n} from 'draft-js';\nimport {removeRange} from 'draft-js/lib/DraftModifier';\n\nimport {BOLD, ITALIC, SUPERSCRIPT, SUBSCRIPT, LINK} from './configuration';\n\n/**\n * Check whether the current selection is over a link\n *\n * @param   {EditorState} editorState   The DraftJS editor state\n * @param   {SelectionState} selection  A DraftJS selection state\n * @returns {Boolean}                   `true` if selection is over a link\n */\nfunction selectionHasLink(editorState, selection) {\n  // If nothing is selected, bail early.\n  if (selection.isCollapsed()) {\n    return false;\n  }\n\n  return cursorHasLink(editorState, selection);\n}\n\n/**\n * Check whether the cursor position is over a link\n *\n * @param   {EditorState} editorState   The DraftJS editor state\n * @param   {SelectionState} selection  A DraftJS selection state\n * @returns {Boolean}                   `true` if cursor is over a link\n */\nexport function cursorHasLink(editorState, selection) {\n  const entity = getEntityByKey(getEntityKeyAt(editorState, selection));\n\n  return Boolean(entity && entity.get('type') === LINK);\n}\n\n/**\n * Get an entity by its key\n * Links are represented as DraftJS entities.\n * https://facebook.github.io/draft-js/docs/api-reference-entity.html#content\n *\n * @param   {String} entityKey    The entity key\n * @returns {DraftEntityInstance} The entity for the key, or `null` if not found\n */\nexport function getEntityByKey(entityKey) {\n  if (!entityKey) {\n    return null;\n  }\n\n  return Entity.get(entityKey);\n}\n\n/**\n * For a given SelectionState, get the underlying entity key.\n *\n * @param   {EditorState} editorState  The DraftJS editor state\n * @param   {SelectionState} selection The DraftJS selection state\n * @returns {String}                   The entity key, or `null` if not found\n */\nexport function getEntityKeyAt(editorState, selection) {\n  if (!selection) {\n    return null;\n  }\n\n  const blockStartKey = selection.getStartKey();\n  const selectionOffset = selection.getStartOffset();\n\n  const contentState = editorState.getCurrentContent();\n  const block = contentState.getBlockForKey(blockStartKey);\n\n  return block.getEntityAt(selectionOffset);\n}\n\n/**\n * Handle a keyboard command.\n * TODO: add custom CMD-k command for link button.\n * https://github.com/plotly/streambed/issues/6384\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @param   {String} command          The command string representation\n * @returns {EditorState}             The new editor state\n */\nexport function handleKeyCommand(editorState, command) {\n  switch (command) {\n    case 'split-block':\n      // Never split editor content into `<p>` blocks.\n      return insertSoftNewline(editorState);\n    case 'bold':\n      return toggleInlineStyle(editorState, BOLD);\n    case 'italic':\n      return toggleInlineStyle(editorState, ITALIC);\n    default:\n      return false;\n  }\n}\n\n/**\n * Insert a soft newline `\\n` that converts to `<br>` in HTML.\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @returns {EditorState}             The new editor state\n */\nexport function insertSoftNewline(editorState) {\n  let newEditorState = editorState;\n\n  // Terminate all current inline styles\n  const currentStyleSet = newEditorState.getCurrentInlineStyle();\n  newEditorState = currentStyleSet.reduce(\n    (reducedEditorState, style) => RichUtils.toggleInlineStyle(reducedEditorState, style),\n    newEditorState\n  );\n\n  // If text is selected, delete text first.\n  const selectionState = newEditorState.getSelection();\n  const selectionStart = selectionState.getStartOffset();\n  const selectionEnd = selectionState.getEndOffset();\n\n  if (selectionEnd - selectionStart !== 0) {\n    const contentState = removeRange(newEditorState.getCurrentContent(), selectionState, 'back');\n\n    newEditorState = EditorState.push(newEditorState, contentState, 'backspace-character');\n  }\n\n  // Insert a newline\n  return RichUtils.insertSoftNewline(newEditorState);\n}\n\n/**\n * Toggle an inline style on/off\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @param   {String} inlineStyle      The inline style string representation\n * @returns {EditorState}             The new editor state\n */\nexport function toggleInlineStyle(editorState, inlineStyle) {\n  /*\n     * TODO tech-debt. Link toggles should not go via toggleInlineStyle.\n     * https://github.com/plotly/streambed/issues/6354\n     */\n\n  if (inlineStyle === LINK) {\n    return toggleLink(editorState);\n  }\n\n  // <sub> and <sup> should be mutually exclusive.\n  const updatedEditorState = toggleMutuallyExclusiveStyles(editorState, inlineStyle);\n\n  // Add the new style.\n  return RichUtils.toggleInlineStyle(updatedEditorState, inlineStyle);\n}\n\n/**\n * Toggle a link on/off\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @returns {EditorState}             The new editor state\n */\nexport function toggleLink(editorState) {\n  const selection = editorState.getSelection();\n\n  if (selectionHasLink(editorState, selection)) {\n    // Remove link\n    return RichUtils.toggleLink(editorState, selection, null);\n  }\n\n  // Create a link with an empty URL\n  const entityKey = Entity.create(LINK, 'MUTABLE', {url: ''});\n\n  return RichUtils.toggleLink(editorState, selection, entityKey);\n}\n\n/**\n * For the current selection, if a SUPERSCRIPT or SUBSCRIPT style is\n * to be applied, un-apply the other style.\n *\n * @param {EditorState} editorState The DraftJS editor state\n * @param {String} inlineStyle      Style about to be applied\n * @returns {EditorState}           The new editor state\n */\nexport function toggleMutuallyExclusiveStyles(editorState, inlineStyle) {\n  const currentStyleSet = editorState.getCurrentInlineStyle();\n\n  if (inlineStyle === SUBSCRIPT && currentStyleSet.includes(SUPERSCRIPT)) {\n    return RichUtils.toggleInlineStyle(editorState, SUPERSCRIPT);\n  }\n\n  if (inlineStyle === SUPERSCRIPT && currentStyleSet.includes(SUBSCRIPT)) {\n    return RichUtils.toggleInlineStyle(editorState, SUBSCRIPT);\n  }\n\n  return editorState;\n}\n"]}