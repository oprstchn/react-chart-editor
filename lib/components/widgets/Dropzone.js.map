{"version":3,"sources":["../../../src/components/widgets/Dropzone.js"],"names":["Dropzone","props","context","_","localize","state","content","validFiletypes","image","onDrop","bind","renderSuccess","value","fileType","backgroundImage","setState","split","join","e","supportedFileTypes","parsingError","onUpdate","target","result","error","console","warn","accepted","rejected","reader","FileReader","length","onload","onLoad","readAsDataURL","Component","propTypes","PropTypes","string","isRequired","func","any","contextType","EditorControlsContext"],"mappings":"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","file":"Dropzone.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Drop from 'react-dropzone';\nimport {EditorControlsContext} from '../../context';\n\nclass Dropzone extends Component {\n  constructor(props, context) {\n    super(props, context);\n    const _ = context.localize;\n\n    this.state = {\n      content: '',\n    };\n\n    this.validFiletypes = {\n      image: _('image/jpeg, image/jpg, image/svg, image/png, image/gif, image/bmp, image/webp'),\n    };\n\n    this.onDrop = this.onDrop.bind(this);\n    this.renderSuccess = this.renderSuccess.bind(this);\n  }\n\n  renderSuccess(value) {\n    const _ = this.context.localize;\n\n    if (this.props.fileType === 'image') {\n      return (\n        <div className=\"dropzone-container__image\" style={{backgroundImage: `url(${value})`}} />\n      );\n    }\n\n    return <div className=\"dropzone-container__message\">{_('File loaded!')}</div>;\n  }\n\n  componentWillMount() {\n    const _ = this.context.localize;\n\n    if (this.props.value && this.props.value !== '') {\n      this.setState({content: this.renderSuccess(this.props.value)});\n      return;\n    }\n\n    this.setState({\n      content: (\n        <div className=\"dropzone-container__message\">\n          <p>\n            {_('Drop the ') +\n              this.props.fileType +\n              _(' to upload here or click to choose a file from your computer.')}\n          </p>\n\n          {this.props.fileType === 'image' ? (\n            <p>\n              {_('Supported formats are: ') +\n                this.validFiletypes[this.props.fileType].split('image/').join('') +\n                '.'}\n            </p>\n          ) : null}\n        </div>\n      ),\n    });\n  }\n\n  onLoad(e) {\n    const _ = this.context.localize;\n    const supportedFileTypes =\n      this.props.fileType === 'image'\n        ? this.validFiletypes[this.props.fileType].split('image/').join('')\n        : this.validFiletypes[this.props.fileType];\n\n    const parsingError = (\n      <div className=\"dropzone-container__message\">\n        <p>{_('Yikes! An error occurred while parsing this file.')}</p>\n        <p>{_('Try again with a supported file format: ') + supportedFileTypes + '.'}</p>\n      </div>\n    );\n\n    if (this.props.fileType === 'image') {\n      try {\n        this.props.onUpdate(e.target.result);\n        this.setState({\n          content: this.renderSuccess(e.target.result),\n        });\n      } catch (error) {\n        console.warn(error); // eslint-disable-line\n        this.setState({\n          content: parsingError,\n        });\n      }\n    }\n  }\n\n  onDrop(accepted, rejected) {\n    const _ = this.context.localize;\n    const reader = new FileReader();\n\n    if (accepted.length) {\n      if (accepted.length > 1) {\n        this.setState({\n          content: (\n            <div className=\"dropzone-container__message\">\n              <p>{_('Yikes! You can only upload one file at a time.')}</p>\n              <p>\n                {_('To upload multiple files, create multiple files and upload them individually.')}\n              </p>\n            </div>\n          ),\n        });\n        return;\n      }\n      this.setState({content: _('Loading...')});\n      reader.onload = e => this.onLoad(e);\n      if (this.props.fileType === 'image') {\n        reader.readAsDataURL(accepted[0]);\n      }\n    }\n\n    if (rejected.length) {\n      const supportedFileTypes =\n        this.props.fileType === 'image'\n          ? this.validFiletypes[this.props.fileType].split('image/').join('')\n          : this.validFiletypes[this.props.fileType];\n\n      this.setState({\n        content: (\n          <div className=\"dropzone-container__message\">\n            <p>\n              {_(\"Yikes! This doesn't look like a valid \") + this.props.fileType + _(' to us. ')}\n            </p>\n            <p>{_('Try again with a ') + supportedFileTypes + ' file.'}</p>\n          </div>\n        ),\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Drop\n        accept={this.validFiletypes[this.props.fileType]}\n        onDrop={this.onDrop}\n        className=\"dropzone-container\"\n        activeClassName=\"dropzone-container--active\"\n        rejectClassName=\"dropzone-container--rejected\"\n      >\n        <div className=\"dropzone-container__content\">{this.state.content}</div>\n      </Drop>\n    );\n  }\n}\n\nDropzone.propTypes = {\n  fileType: PropTypes.string.isRequired,\n  onUpdate: PropTypes.func,\n  value: PropTypes.any,\n};\n\nDropzone.contextType = EditorControlsContext;\n\nexport default Dropzone;\n"]}