{"version":3,"sources":["../../src/lib/striptags.js"],"names":["global","Symbol","name","nonNative","STATE_PLAINTEXT","STATE_HTML","STATE_COMMENT","ALLOWED_TAGS_REGEX","NORMALIZE_TAG_REGEX","striptags","html","allowable_tags","tag_replacement","context","init_context","striptags_internal","init_striptags_stream","striptags_stream","init_streaming_mode","parse_allowable_tags","state","tag_buffer","depth","in_quote_char","output","idx","length","char","has","normalize_tag","slice","tag_set","Set","match","exec","add","iterator","forEach","toLowerCase","define","amd","module_factory","module","exports"],"mappings":"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","file":"striptags.js","sourcesContent":["/* eslint-disable */\n\n// The MIT License (MIT)\n//\n// Copyright (c) [2017] [Eric Norris]\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n'use strict';\n\n(function(global) {\n  // minimal symbol polyfill for IE11 and others\n  if (typeof Symbol !== 'function') {\n    var Symbol = function(name) {\n      return name;\n    };\n\n    Symbol.nonNative = true;\n  }\n\n  const STATE_PLAINTEXT = Symbol('plaintext');\n  const STATE_HTML = Symbol('html');\n  const STATE_COMMENT = Symbol('comment');\n\n  const ALLOWED_TAGS_REGEX = /<(\\w*)>/g;\n  const NORMALIZE_TAG_REGEX = /<\\/?([^\\s\\/>]+)/;\n\n  function striptags(html, allowable_tags, tag_replacement) {\n    html = html || '';\n    allowable_tags = allowable_tags || [];\n    tag_replacement = tag_replacement || '';\n\n    const context = init_context(allowable_tags, tag_replacement);\n\n    return striptags_internal(html, context);\n  }\n\n  function init_striptags_stream(allowable_tags, tag_replacement) {\n    allowable_tags = allowable_tags || [];\n    tag_replacement = tag_replacement || '';\n\n    const context = init_context(allowable_tags, tag_replacement);\n\n    return function striptags_stream(html) {\n      return striptags_internal(html || '', context);\n    };\n  }\n\n  striptags.init_streaming_mode = init_striptags_stream;\n\n  function init_context(allowable_tags, tag_replacement) {\n    allowable_tags = parse_allowable_tags(allowable_tags);\n\n    return {\n      allowable_tags: allowable_tags,\n      tag_replacement: tag_replacement,\n\n      state: STATE_PLAINTEXT,\n      tag_buffer: '',\n      depth: 0,\n      in_quote_char: '',\n    };\n  }\n\n  function striptags_internal(html, context) {\n    const allowable_tags = context.allowable_tags;\n    const tag_replacement = context.tag_replacement;\n\n    let state = context.state;\n    let tag_buffer = context.tag_buffer;\n    let depth = context.depth;\n    let in_quote_char = context.in_quote_char;\n    let output = '';\n\n    for (let idx = 0, length = html.length; idx < length; idx++) {\n      const char = html[idx];\n\n      if (state === STATE_PLAINTEXT) {\n        switch (char) {\n          case '<':\n            state = STATE_HTML;\n            tag_buffer += char;\n            break;\n\n          default:\n            output += char;\n            break;\n        }\n      } else if (state === STATE_HTML) {\n        switch (char) {\n          case '<':\n            // ignore '<' if inside a quote\n            if (in_quote_char) {\n              break;\n            }\n\n            // we're seeing a nested '<'\n            depth++;\n            break;\n\n          case '>':\n            // ignore '>' if inside a quote\n            if (in_quote_char) {\n              break;\n            }\n\n            // something like this is happening: '<<>>'\n            if (depth) {\n              depth--;\n\n              break;\n            }\n\n            // this is closing the tag in tag_buffer\n            in_quote_char = '';\n            state = STATE_PLAINTEXT;\n            tag_buffer += '>';\n\n            if (allowable_tags.has(normalize_tag(tag_buffer))) {\n              output += tag_buffer;\n            } else {\n              output += tag_replacement;\n            }\n\n            tag_buffer = '';\n            break;\n\n          case '\"':\n          case \"'\":\n            // catch both single and double quotes\n\n            if (char === in_quote_char) {\n              in_quote_char = '';\n            } else {\n              in_quote_char = in_quote_char || char;\n            }\n\n            tag_buffer += char;\n            break;\n\n          case '-':\n            if (tag_buffer === '<!-') {\n              state = STATE_COMMENT;\n            }\n\n            tag_buffer += char;\n            break;\n\n          case ' ':\n          case '\\n':\n            if (tag_buffer === '<') {\n              state = STATE_PLAINTEXT;\n              output += '< ';\n              tag_buffer = '';\n\n              break;\n            }\n\n            tag_buffer += char;\n            break;\n\n          default:\n            tag_buffer += char;\n            break;\n        }\n      } else if (state === STATE_COMMENT) {\n        switch (char) {\n          case '>':\n            if (tag_buffer.slice(-2) == '--') {\n              // close the comment\n              state = STATE_PLAINTEXT;\n            }\n\n            tag_buffer = '';\n            break;\n\n          default:\n            tag_buffer += char;\n            break;\n        }\n      }\n    }\n\n    // save the context for future iterations\n    context.state = state;\n    context.tag_buffer = tag_buffer;\n    context.depth = depth;\n    context.in_quote_char = in_quote_char;\n\n    return output;\n  }\n\n  function parse_allowable_tags(allowable_tags) {\n    let tag_set = new Set();\n\n    if (typeof allowable_tags === 'string') {\n      let match;\n\n      while ((match = ALLOWED_TAGS_REGEX.exec(allowable_tags))) {\n        tag_set.add(match[1]);\n      }\n    } else if (!Symbol.nonNative && typeof allowable_tags[Symbol.iterator] === 'function') {\n      tag_set = new Set(allowable_tags);\n    } else if (typeof allowable_tags.forEach === 'function') {\n      // IE11 compatible\n      allowable_tags.forEach(tag_set.add, tag_set);\n    }\n\n    return tag_set;\n  }\n\n  function normalize_tag(tag_buffer) {\n    const match = NORMALIZE_TAG_REGEX.exec(tag_buffer);\n\n    return match ? match[1].toLowerCase() : null;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(function module_factory() {\n      return striptags;\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = striptags;\n  } else {\n    // Browser\n    global.striptags = striptags;\n  }\n})(this);\n"]}