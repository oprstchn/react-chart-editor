{"version":3,"sources":["../../src/lib/connectTraceToPlot.js"],"names":["connectTraceToPlot","WrappedComponent","TraceConnectedComponent","props","context","deleteTrace","bind","updateTrace","setLocals","nextProps","nextContext","traceIndexes","data","fullData","plotly","trace","fullTrace","childContext","getValObject","PlotSchema","getTraceValObject","attr","parts","updateContainer","deleteContainer","container","fullContainer","length","multiValuedFullContainer","forEach","Object","keys","t","key","searchArrays","multiValuedContainer","defaultContainer","icon","name","update","onUpdate","splitTraceGroup","fullDataArrayPosition","map","p","_group","containsAnSrc","filter","a","endsWith","Array","isArray","u","i","type","EDITOR_ACTIONS","UPDATE_TRACES","payload","currentTrace","DELETE_TRACE","axesToBeGarbageCollected","subplotToBeGarbageCollected","subplotType","subplotNames","xaxis","yaxis","SUBPLOT_TO_ATTR","isSubplotUsedAnywhereElse","subplotName","some","charAt","split","index","push","Component","displayName","propTypes","PropTypes","arrayOf","number","isRequired","contextTypes","array","object","func","childContextTypes","plotly_editor_traits"],"mappings":"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","file":"connectTraceToPlot.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {\n  getDisplayName,\n  plotlyTraceToCustomTrace,\n  renderTraceIcon,\n  traceTypeToAxisType,\n  getFullTrace,\n} from '../lib';\nimport {deepCopyPublic, setMultiValuedContainer} from './multiValues';\nimport {EDITOR_ACTIONS, SUBPLOT_TO_ATTR} from 'lib/constants';\n\nexport default function connectTraceToPlot(WrappedComponent) {\n  class TraceConnectedComponent extends Component {\n    constructor(props, context) {\n      super(props, context);\n\n      this.deleteTrace = this.deleteTrace.bind(this);\n      this.updateTrace = this.updateTrace.bind(this);\n      this.setLocals(props, context);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      this.setLocals(nextProps, nextContext);\n    }\n\n    setLocals(props, context) {\n      const {traceIndexes} = props;\n      const {data, fullData, plotly} = context;\n\n      const trace = data[traceIndexes[0]];\n      const fullTrace = getFullTrace(props, context);\n\n      this.childContext = {\n        getValObject: attr =>\n          !plotly\n            ? null\n            : plotly.PlotSchema.getTraceValObject(fullTrace, nestedProperty({}, attr).parts),\n        updateContainer: this.updateTrace,\n        deleteContainer: this.deleteTrace,\n        container: trace,\n        fullContainer: fullTrace,\n        traceIndexes: this.props.traceIndexes,\n      };\n\n      if (traceIndexes.length > 1) {\n        const multiValuedFullContainer = deepCopyPublic(fullTrace);\n        fullData.forEach(t =>\n          Object.keys(t).forEach(key =>\n            setMultiValuedContainer(multiValuedFullContainer, deepCopyPublic(t), key, {\n              searchArrays: true,\n            })\n          )\n        );\n        const multiValuedContainer = deepCopyPublic(trace);\n        data.forEach(t =>\n          Object.keys(t).forEach(key =>\n            setMultiValuedContainer(multiValuedContainer, deepCopyPublic(t), key, {\n              searchArrays: true,\n            })\n          )\n        );\n        this.childContext.fullContainer = multiValuedFullContainer;\n        this.childContext.defaultContainer = fullTrace;\n        this.childContext.container = multiValuedContainer;\n      }\n\n      if (trace && fullTrace) {\n        this.icon = renderTraceIcon(plotlyTraceToCustomTrace(trace));\n        this.name = fullTrace.name;\n      }\n    }\n\n    getChildContext() {\n      return this.childContext;\n    }\n\n    provideValue() {\n      return this.childContext;\n    }\n\n    updateTrace(update) {\n      if (this.context.onUpdate) {\n        const splitTraceGroup = this.props.fullDataArrayPosition\n          ? this.props.fullDataArrayPosition.map(p => this.context.fullData[p]._group)\n          : null;\n\n        const containsAnSrc = Object.keys(update).filter(a => a.endsWith('src')).length > 0;\n\n        if (Array.isArray(update)) {\n          update.forEach((u, i) => {\n            this.context.onUpdate({\n              type: EDITOR_ACTIONS.UPDATE_TRACES,\n              payload: {\n                update: u,\n                traceIndexes: [this.props.traceIndexes[i]],\n                splitTraceGroup: splitTraceGroup ? splitTraceGroup[i] : null,\n              },\n            });\n          });\n        } else if (splitTraceGroup && !containsAnSrc) {\n          this.props.traceIndexes.forEach((t, i) => {\n            this.context.onUpdate({\n              type: EDITOR_ACTIONS.UPDATE_TRACES,\n              payload: {\n                update,\n                traceIndexes: [this.props.traceIndexes[i]],\n                splitTraceGroup: splitTraceGroup ? splitTraceGroup[i] : null,\n              },\n            });\n          });\n        } else {\n          this.context.onUpdate({\n            type: EDITOR_ACTIONS.UPDATE_TRACES,\n            payload: {\n              update,\n              traceIndexes: this.props.traceIndexes,\n            },\n          });\n        }\n      }\n    }\n\n    deleteTrace() {\n      const currentTrace = this.context.fullData[this.props.traceIndexes[0]];\n      if (!currentTrace && this.context.onUpdate) {\n        this.context.onUpdate({\n          type: EDITOR_ACTIONS.DELETE_TRACE,\n          payload: {\n            traceIndexes: this.props.traceIndexes,\n          },\n        });\n        return;\n      }\n      const axesToBeGarbageCollected = [];\n      let subplotToBeGarbageCollected = null;\n      const subplotType = traceTypeToAxisType(currentTrace.type);\n\n      if (subplotType) {\n        const subplotNames =\n          subplotType === 'cartesian'\n            ? [currentTrace.xaxis || 'xaxis', currentTrace.yaxis || 'yaxis']\n            : currentTrace[SUBPLOT_TO_ATTR[subplotType].data] || SUBPLOT_TO_ATTR[subplotType].data;\n\n        const isSubplotUsedAnywhereElse = (subplotType, subplotName) =>\n          this.context.fullData.some(\n            trace =>\n              (trace[SUBPLOT_TO_ATTR[subplotType].data] === subplotName ||\n                (((subplotType === 'xaxis' || subplotType === 'yaxis') && subplotName.charAt(1)) ===\n                  '' ||\n                  (subplotName.split(subplotType)[1] === '' &&\n                    trace[SUBPLOT_TO_ATTR[subplotType].data] === null))) &&\n              trace.index !== this.props.traceIndexes[0]\n          );\n\n        // When we delete a subplot, make sure no unused axes/subplots are left\n        if (subplotType === 'cartesian') {\n          if (!isSubplotUsedAnywhereElse('xaxis', subplotNames[0])) {\n            axesToBeGarbageCollected.push(subplotNames[0]);\n          }\n          if (!isSubplotUsedAnywhereElse('yaxis', subplotNames[1])) {\n            axesToBeGarbageCollected.push(subplotNames[1]);\n          }\n        } else {\n          if (!isSubplotUsedAnywhereElse(subplotType, subplotNames)) {\n            subplotToBeGarbageCollected = subplotNames;\n          }\n        }\n      }\n\n      if (this.context.onUpdate) {\n        this.context.onUpdate({\n          type: EDITOR_ACTIONS.DELETE_TRACE,\n          payload: {\n            axesToBeGarbageCollected,\n            subplotToBeGarbageCollected,\n            traceIndexes: this.props.traceIndexes,\n          },\n        });\n      }\n    }\n\n    render() {\n      return <WrappedComponent name={this.name} icon={this.icon} {...this.props} />;\n    }\n  }\n\n  TraceConnectedComponent.displayName = `TraceConnected${getDisplayName(WrappedComponent)}`;\n\n  TraceConnectedComponent.propTypes = {\n    traceIndexes: PropTypes.arrayOf(PropTypes.number).isRequired,\n    fullDataArrayPosition: PropTypes.arrayOf(PropTypes.number),\n  };\n\n  TraceConnectedComponent.contextTypes = {\n    fullData: PropTypes.array,\n    data: PropTypes.array,\n    plotly: PropTypes.object,\n    onUpdate: PropTypes.func,\n  };\n\n  TraceConnectedComponent.childContextTypes = {\n    getValObject: PropTypes.func,\n    updateContainer: PropTypes.func,\n    deleteContainer: PropTypes.func,\n    defaultContainer: PropTypes.object,\n    container: PropTypes.object,\n    fullContainer: PropTypes.object,\n    traceIndexes: PropTypes.array,\n  };\n\n  const {plotly_editor_traits} = WrappedComponent;\n  TraceConnectedComponent.plotly_editor_traits = plotly_editor_traits;\n\n  return TraceConnectedComponent;\n}\n"]}