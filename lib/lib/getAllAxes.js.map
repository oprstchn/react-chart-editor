{"version":3,"sources":["../../src/lib/getAllAxes.js"],"names":["getAllAxes","traceTypeToAxisType","axisIdToAxisName","getAxisTitle","getSubplotTitle","fullLayout","axes","_subplots","Object","keys","filter","type","length","forEach","includes","subplot","slice","_subplot","_axisGroup","push","key","axis","_name","traceType","category","traceToAxis","TRACE_TO_AXIS","assign","scene","gl3d","c","Error","id","charAt","getAxisNumber","splitSubplot","split","Number","axisType","subplotNumber","_input","title","getSubplotNumber","_","axisName","SUBPLOT_TO_ATTR","layout"],"mappings":"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","file":"getAllAxes.js","sourcesContent":["import {TRACE_TO_AXIS, SUBPLOT_TO_ATTR, subplotName} from 'lib/constants';\nimport {capitalize, striptags} from 'lib';\n\nexport default function getAllAxes(fullLayout) {\n  const axes = [];\n  // Plotly.js should really have a helper function for this, but until it does..\n  if (fullLayout && fullLayout._subplots) {\n    Object.keys(fullLayout._subplots)\n      .filter(\n        // xaxis and yaxis already included separately in _fullLayout._subplots\n        type => type !== 'cartesian' && fullLayout._subplots[type].length !== 0\n      )\n      .forEach(type => {\n        fullLayout._subplots[type].forEach(subplot => {\n          if (['xaxis', 'yaxis'].includes(type)) {\n            // subplot will look like x2, x45, convert it to xaxis2, xaxis45\n            subplot = // eslint-disable-line no-param-reassign\n              subplot.length > 1\n                ? subplot.slice(0, 1) + 'axis' + subplot.slice(1)\n                : subplot + 'axis';\n\n            fullLayout[subplot]._subplot = subplot;\n            fullLayout[subplot]._axisGroup = type;\n            axes.push(fullLayout[subplot]);\n          } else {\n            Object.keys(fullLayout[subplot])\n              .filter(key => key.includes('axis'))\n              .forEach(axis => {\n                fullLayout[subplot][axis]._subplot = subplot;\n                fullLayout[subplot][axis]._axisGroup = type;\n\n                // it should be in plotly.js, but it's not there for geo axes..\n                if (!fullLayout[subplot][axis]._name) {\n                  fullLayout[subplot][axis]._name = axis;\n                }\n                axes.push(fullLayout[subplot][axis]);\n              });\n          }\n        });\n      });\n  }\n\n  return axes;\n}\n\nexport function traceTypeToAxisType(traceType, subplot = false) {\n  // plotly.js actually allows traces with no type and just\n  // defaults them to scatter, so do this here as well.\n  if (!traceType) {\n    traceType = 'scatter'; // eslint-disable-line\n  }\n\n  let category = null;\n  const traceToAxis = TRACE_TO_AXIS;\n  if (subplot) {\n    Object.assign(traceToAxis, TRACE_TO_AXIS, {scene: TRACE_TO_AXIS.gl3d});\n    delete traceToAxis.gl3d;\n  }\n\n  Object.keys(traceToAxis).forEach(c => {\n    if (traceToAxis[c].includes(traceType)) {\n      category = c;\n    }\n  });\n\n  if (category) {\n    return category;\n  }\n\n  if (traceType === 'pie' || traceType === 'table') {\n    return null;\n  }\n\n  throw new Error(`Sorry, could not find ${traceType} in any category.`);\n}\n\nexport function axisIdToAxisName(id) {\n  return id.charAt(0) + 'axis' + id.slice(1);\n}\n\nfunction getAxisNumber(axis) {\n  const splitSubplot = axis._subplot ? axis._subplot.split(axis._axisGroup) : [];\n  return splitSubplot[1] ? Number(splitSubplot[1]) : axis._name.split('axis')[1];\n}\n\nexport function getAxisTitle(axis) {\n  const axisType = capitalize(axis._name.split('axis')[0]);\n  const subplotNumber = getAxisNumber(axis) || 1;\n\n  return axis._input && axis._input.title\n    ? striptags(`${axisType}: ${axis._input.title}`)\n    : striptags(`${axisType} ${subplotNumber}`);\n}\n\nfunction getSubplotNumber(subplot, type) {\n  return Number(subplot.split(type)[1]);\n}\n\nexport function getSubplotTitle(subplot, type, _) {\n  const axisName = subplotName(type, _);\n  const subplotNumber = getSubplotNumber(subplot, SUBPLOT_TO_ATTR[type].layout) || '';\n\n  return `${axisName} ${subplotNumber}`;\n}\n"]}