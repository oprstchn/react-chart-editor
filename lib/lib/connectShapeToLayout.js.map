{"version":3,"sources":["../../src/lib/connectShapeToLayout.js"],"names":["connectShapeToLayout","WrappedComponent","ShapeConnectedComponent","props","context","deleteShape","bind","updateShape","setLocals","nextProps","nextContext","shapeIndex","container","fullContainer","shapes","fullShapes","getValObject","attr","updateContainer","deleteContainer","update","newUpdate","key","newkey","onUpdate","type","EDITOR_ACTIONS","DELETE_SHAPE","payload","Component","displayName","propTypes","PropTypes","number","isRequired","contextTypes","object","data","array","func","childContextTypes","plotly_editor_traits"],"mappings":"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","file":"connectShapeToLayout.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {getDisplayName} from '../lib';\nimport {EDITOR_ACTIONS} from './constants';\n\nexport default function connectShapeToLayout(WrappedComponent) {\n  class ShapeConnectedComponent extends Component {\n    constructor(props, context) {\n      super(props, context);\n\n      this.deleteShape = this.deleteShape.bind(this);\n      this.updateShape = this.updateShape.bind(this);\n      this.setLocals(props, context);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      this.setLocals(nextProps, nextContext);\n    }\n\n    setLocals(props, context) {\n      const {shapeIndex} = props;\n      const {container, fullContainer} = context;\n\n      const shapes = container.shapes || [];\n      const fullShapes = fullContainer.shapes || [];\n      this.container = shapes[shapeIndex];\n      this.fullContainer = fullShapes[shapeIndex];\n    }\n\n    getChildContext() {\n      return {\n        getValObject: attr =>\n          !this.context.getValObject ? null : this.context.getValObject(`shapes[].${attr}`),\n        updateContainer: this.updateShape,\n        deleteContainer: this.deleteShape,\n        container: this.container,\n        fullContainer: this.fullContainer,\n      };\n    }\n\n    provideValue() {\n      return {\n        getValObject: attr =>\n          !this.context.getValObject ? null : this.context.getValObject(`shapes[].${attr}`),\n        updateContainer: this.updateShape,\n        deleteContainer: this.deleteShape,\n        container: this.container,\n        fullContainer: this.fullContainer,\n      };\n    }\n\n    updateShape(update) {\n      const newUpdate = {};\n      const {shapeIndex} = this.props;\n      for (const key in update) {\n        const newkey = `shapes[${shapeIndex}].${key}`;\n        newUpdate[newkey] = update[key];\n      }\n      this.context.updateContainer(newUpdate);\n    }\n\n    deleteShape() {\n      if (this.context.onUpdate) {\n        this.context.onUpdate({\n          type: EDITOR_ACTIONS.DELETE_SHAPE,\n          payload: {shapeIndex: this.props.shapeIndex},\n        });\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  ShapeConnectedComponent.displayName = `ShapeConnected${getDisplayName(WrappedComponent)}`;\n\n  ShapeConnectedComponent.propTypes = {\n    shapeIndex: PropTypes.number.isRequired,\n  };\n\n  ShapeConnectedComponent.contextTypes = {\n    container: PropTypes.object,\n    fullContainer: PropTypes.object,\n    data: PropTypes.array,\n    onUpdate: PropTypes.func,\n    updateContainer: PropTypes.func,\n    getValObject: PropTypes.func,\n  };\n\n  ShapeConnectedComponent.childContextTypes = {\n    updateContainer: PropTypes.func,\n    deleteContainer: PropTypes.func,\n    container: PropTypes.object,\n    fullContainer: PropTypes.object,\n    getValObject: PropTypes.func,\n  };\n\n  const {plotly_editor_traits} = WrappedComponent;\n  ShapeConnectedComponent.plotly_editor_traits = plotly_editor_traits;\n\n  return ShapeConnectedComponent;\n}\n"]}