{"version":3,"sources":["../../src/lib/computeTraceOptionsFromSchema.js"],"names":["computeTraceOptionsFromSchema","schema","_","context","traceTypes","Object","keys","traces","filter","includes","t","traceOptions","value","label","indexOf","obj","traceIndex","findIndex","opt","traceType","splice","config","mapboxAccessToken","push"],"mappings":"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","file":"computeTraceOptionsFromSchema.js","sourcesContent":["function computeTraceOptionsFromSchema(schema, _, context) {\n  // Filter out Polar \"area\" type as it is fairly broken and we want to present\n  // scatter with fill as an \"area\" chart type for convenience.\n  const traceTypes = Object.keys(schema.traces).filter(t => !['area', 'scattermapbox'].includes(t));\n\n  const traceOptions = [\n    {\n      value: 'scatter',\n      label: _('Scatter'),\n    },\n    {\n      value: 'box',\n      label: _('Box'),\n    },\n    {\n      value: 'bar',\n      label: _('Bar'),\n    },\n    {\n      value: 'heatmap',\n      label: _('Heatmap'),\n    },\n    {\n      value: 'histogram',\n      label: _('Histogram'),\n    },\n    {\n      value: 'histogram2d',\n      label: _('2D Histogram'),\n    },\n    {\n      value: 'histogram2dcontour',\n      label: _('2D Contour Histogram'),\n    },\n    {\n      value: 'pie',\n      label: _('Pie'),\n    },\n    {\n      value: 'contour',\n      label: _('Contour'),\n    },\n    {\n      value: 'scatterternary',\n      label: _('Ternary Scatter'),\n    },\n    {\n      value: 'violin',\n      label: _('Violin'),\n    },\n    {\n      value: 'scatter3d',\n      label: _('3D Scatter'),\n    },\n    {\n      value: 'surface',\n      label: _('Surface'),\n    },\n    {\n      value: 'mesh3d',\n      label: _('3D Mesh'),\n    },\n    {\n      value: 'cone',\n      label: _('Cone'),\n    },\n    {\n      value: 'streamtube',\n      label: _('Streamtube'),\n    },\n    {\n      value: 'scattergeo',\n      label: _('Atlas Map'),\n    },\n    {\n      value: 'choropleth',\n      label: _('Choropleth'),\n    },\n    {\n      value: 'scattergl',\n      label: _('Scatter GL'),\n    },\n    {\n      value: 'pointcloud',\n      label: _('Point Cloud'),\n    },\n    {\n      value: 'heatmapgl',\n      label: _('Heatmap GL'),\n    },\n    {\n      value: 'parcoords',\n      label: _('Parallel Coordinates'),\n    },\n    {\n      value: 'sankey',\n      label: _('Sankey'),\n    },\n    {\n      value: 'table',\n      label: _('Table'),\n    },\n    {\n      value: 'carpet',\n      label: _('Carpet'),\n    },\n    {\n      value: 'scattercarpet',\n      label: _('Carpet Scatter'),\n    },\n    {\n      value: 'contourcarpet',\n      label: _('Carpet Contour'),\n    },\n    {\n      value: 'ohlc',\n      label: _('OHLC'),\n    },\n    {\n      value: 'candlestick',\n      label: _('Candlestick'),\n    },\n    {\n      value: 'scatterpolar',\n      label: _('Polar Scatter'),\n    },\n    {\n      value: 'scatterpolargl',\n      label: _('Polar Scatter GL'),\n    },\n    {\n      value: 'barpolar',\n      label: _('Polar Bar'),\n    },\n  ].filter(obj => traceTypes.indexOf(obj.value) !== -1);\n\n  const traceIndex = traceType => traceOptions.findIndex(opt => opt.value === traceType);\n\n  traceOptions.splice(\n    traceIndex('scatter') + 1,\n    0,\n    {label: _('Line'), value: 'line'},\n    {label: _('Area'), value: 'area'},\n    {label: _('Timeseries'), value: 'timeseries'}\n  );\n\n  traceOptions.splice(traceIndex('scatter3d') + 1, 0, {\n    label: _('3D Line'),\n    value: 'line3d',\n  });\n\n  if (context.config && context.config.mapboxAccessToken) {\n    traceOptions.push({\n      value: 'scattermapbox',\n      label: _('Satellite Map'),\n    });\n  }\n\n  return traceOptions;\n}\n\nexport {computeTraceOptionsFromSchema};\n"]}