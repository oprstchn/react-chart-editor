{"version":3,"sources":["../../src/lib/unpackPlotProps.js"],"names":["unpackPlotProps","props","context","container","getValObject","defaultContainer","updateContainer","attr","attrMeta","fullContainer","fullProperty","fullValue","get","multiValued","MULTI_VALUED","MULTI_VALUED_PLACEHOLDER","isVisible","show","defaultValue","min","max","description","updatePlot","v"],"mappings":";;;;;kBAIwBA,e;;AAJxB;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,eAAT,CAAyBC,KAAzB,EAAgCC,OAAhC,EAAyC;AAAA,MAC/CC,SAD+C,GACeD,OADf,CAC/CC,SAD+C;AAAA,MACpCC,YADoC,GACeF,OADf,CACpCE,YADoC;AAAA,MACtBC,gBADsB,GACeH,OADf,CACtBG,gBADsB;AAAA,MACJC,eADI,GACeJ,OADf,CACJI,eADI;;;AAGtD,MAAI,CAACL,MAAMM,IAAX,EAAiB;AACf,WAAO,EAAP;AACD;;AAED,MAAIC,iBAAJ;AACA,MAAIJ,YAAJ,EAAkB;AAChBI,eAAWN,QAAQE,YAAR,CAAqBH,MAAMM,IAA3B,KAAoC,EAA/C;AACD;;AAED,MAAME,gBAAgBP,QAAQO,aAA9B;;AAEA,MAAMC,eAAe,+BAAeD,aAAf,EAA8BR,MAAMM,IAApC,CAArB;AACA,MAAII,YAAYD,aAAaE,GAAb,EAAhB;AACA,MAAIC,cAAc,KAAlB;;AAEA;AACA;AACA;AACA,MAAIF,cAAcG,uBAAlB,EAAgC;AAC9BH,gBAAYI,mCAAZ;AACAF,kBAAc,IAAd;AACD;;AAED,MAAIG,YAAY,KAAhB;AACA,MAAIf,MAAMgB,IAAN,IAAeN,cAAc,KAAK,CAAnB,IAAwBA,cAAc,IAAzD,EAAgE;AAC9DK,gBAAY,IAAZ;AACD;;AAED,MAAIE,eAAejB,MAAMiB,YAAzB;AACA,MAAIA,iBAAiB,KAAK,CAAtB,IAA2Bb,gBAA/B,EAAiD;AAC/Ca,mBAAe,+BAAeb,gBAAf,EAAiCJ,MAAMM,IAAvC,EAA6CK,GAA7C,EAAf;AACD;;AAED,MAAIO,YAAJ;AAAA,MAASC,YAAT;AAAA,MAAcC,oBAAd;AACA,MAAIb,QAAJ,EAAc;AACZ,QAAI,6BAAUA,SAASY,GAAnB,CAAJ,EAA6B;AAC3BA,YAAMZ,SAASY,GAAf;AACD;AACD,QAAI,6BAAUZ,SAASW,GAAnB,CAAJ,EAA6B;AAC3BA,YAAMX,SAASW,GAAf;AACD;;AAEDE,kBAAcb,SAASa,WAAvB;AACD;;AAED,MAAMC,aAAa,SAAbA,UAAa,IAAK;AACtB,QAAIhB,eAAJ,EAAqB;AACnBA,0CAAkBL,MAAMM,IAAxB,EAA+BgB,CAA/B;AACD;AACF,GAJD;;AAMA,SAAO;AACLf,sBADK;AAELL,wBAFK;AAGLe,8BAHK;AAILT,gCAJK;AAKLE,wBALK;AAMLP,8BANK;AAOLY,wBAPK;AAQLI,YARK;AASLD,YATK;AAULE,4BAVK;AAWLR,4BAXK;AAYLP,oCAZK;AAaLgB;AAbK,GAAP;AAeD","file":"unpackPlotProps.js","sourcesContent":["import nestedProperty from 'plotly.js/src/lib/nested_property';\nimport isNumeric from 'fast-isnumeric';\nimport {MULTI_VALUED, MULTI_VALUED_PLACEHOLDER} from './constants';\n\nexport default function unpackPlotProps(props, context) {\n  const {container, getValObject, defaultContainer, updateContainer} = context;\n\n  if (!props.attr) {\n    return {};\n  }\n\n  let attrMeta;\n  if (getValObject) {\n    attrMeta = context.getValObject(props.attr) || {};\n  }\n\n  const fullContainer = context.fullContainer;\n\n  const fullProperty = nestedProperty(fullContainer, props.attr);\n  let fullValue = fullProperty.get();\n  let multiValued = false;\n\n  // MULTI_VALUED consists of a control sequence that cannot be confused with\n  // user data. We must transform it into something that can be displayed as\n  // the screen.\n  if (fullValue === MULTI_VALUED) {\n    fullValue = MULTI_VALUED_PLACEHOLDER;\n    multiValued = true;\n  }\n\n  let isVisible = false;\n  if (props.show || (fullValue !== void 0 && fullValue !== null)) {\n    isVisible = true;\n  }\n\n  let defaultValue = props.defaultValue;\n  if (defaultValue === void 0 && defaultContainer) {\n    defaultValue = nestedProperty(defaultContainer, props.attr).get();\n  }\n\n  let min, max, description;\n  if (attrMeta) {\n    if (isNumeric(attrMeta.max)) {\n      max = attrMeta.max;\n    }\n    if (isNumeric(attrMeta.min)) {\n      min = attrMeta.min;\n    }\n\n    description = attrMeta.description;\n  }\n\n  const updatePlot = v => {\n    if (updateContainer) {\n      updateContainer({[props.attr]: v});\n    }\n  };\n\n  return {\n    attrMeta,\n    container,\n    defaultValue,\n    fullContainer,\n    fullValue,\n    getValObject,\n    isVisible,\n    max,\n    min,\n    description,\n    multiValued,\n    updateContainer,\n    updatePlot,\n  };\n}\n"]}