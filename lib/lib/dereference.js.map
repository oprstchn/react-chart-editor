{"version":3,"sources":["../../src/lib/dereference.js"],"names":["dereference","SRC_ATTR_PATTERN","container","dataSources","config","deleteKeys","replacer","key","parent","srcPath","test","dataKey","replace","traceType","type","srcRef","toSrc","Array","isArray","data","map","ref","length","walkArraysMatchingKeys","pathType"],"mappings":";;;;;kBAKwBA,W;;AALxB;;;;AACA;;;;AAEA,IAAMC,mBAAmB,MAAzB;;AAEe,SAASD,WAAT,CAAqBE,SAArB,EAAgCC,WAAhC,EAA2E;AAAA,MAA9BC,MAA8B,uEAArB,EAACC,YAAY,KAAb,EAAqB;;AACxF,MAAMC,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,MAAN,EAAcC,OAAd,EAA0B;AACzC,QAAI,CAACR,iBAAiBS,IAAjB,CAAsBH,GAAtB,CAAL,EAAiC;AAC/B;AACD;;AAED,QAAMI,UAAUJ,IAAIK,OAAJ,CAAYX,gBAAZ,EAA8B,EAA9B,CAAhB;AACA,QAAMY,YAAYL,OAAOM,IAAzB;;AAEA,QAAIC,SAASX,OAAOY,KAAP,GAAeZ,OAAOY,KAAP,CAAaR,OAAOD,GAAP,CAAb,CAAf,GAA2CC,OAAOD,GAAP,CAAxD;;AAEA;AACA,QAAI,CAACU,MAAMC,OAAN,CAAcH,MAAd,CAAL,EAA4B;AAC1BA,eAAS,CAACA,MAAD,CAAT;AACD;;AAED,QAAII,OAAOJ,OAAOK,GAAP,CAAW,eAAO;AAC3B,UAAIhB,OAAOC,UAAP,IAAqB,EAAEgB,OAAOlB,WAAT,CAAzB,EAAgD;AAC9C,eAAOK,OAAOG,OAAP,CAAP;AACD;AACD,aAAOR,YAAYkB,GAAZ,CAAP;AACD,KALU,CAAX;;AAOA;AACA,QAAIN,OAAOO,MAAP,KAAkB,CAAtB,EAAyB;AACvBH,aAAOA,KAAK,CAAL,CAAP;AACD;;AAED,QAAI,CAACF,MAAMC,OAAN,CAAcC,IAAd,CAAL,EAA0B;AACxB;AACD;;AAEDX,WAAOG,OAAP,IAAkB,+BAAmBQ,IAAnB,EAAyBV,OAAzB,EAAkCI,SAAlC,CAAlB;AACD,GAhCD;;AAkCA,4BAAWX,SAAX,EAAsBI,QAAtB,EAAgC;AAC9BiB,4BAAwB,CAAC,MAAD,EAAS,YAAT,CADM;AAE9BC,cAAU;AAFoB,GAAhC;AAID","file":"dereference.js","sourcesContent":["import walkObject from './walkObject';\nimport {maybeTransposeData} from './index';\n\nconst SRC_ATTR_PATTERN = /src$/;\n\nexport default function dereference(container, dataSources, config = {deleteKeys: false}) {\n  const replacer = (key, parent, srcPath) => {\n    if (!SRC_ATTR_PATTERN.test(key)) {\n      return;\n    }\n\n    const dataKey = key.replace(SRC_ATTR_PATTERN, '');\n    const traceType = parent.type;\n\n    let srcRef = config.toSrc ? config.toSrc(parent[key]) : parent[key];\n\n    // making this into an array to more easily lookup 1d and 2d srcs in dataSourceOptions\n    if (!Array.isArray(srcRef)) {\n      srcRef = [srcRef];\n    }\n\n    let data = srcRef.map(ref => {\n      if (config.deleteKeys && !(ref in dataSources)) {\n        delete parent[dataKey];\n      }\n      return dataSources[ref];\n    });\n\n    // remove extra data wrapping\n    if (srcRef.length === 1) {\n      data = data[0];\n    }\n\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    parent[dataKey] = maybeTransposeData(data, srcPath, traceType);\n  };\n\n  walkObject(container, replacer, {\n    walkArraysMatchingKeys: ['data', 'transforms'],\n    pathType: 'nestedProperty',\n  });\n}\n"]}