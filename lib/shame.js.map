{"version":3,"sources":["../src/shame.js"],"names":["shamefullyClearAxisTypes","graphDiv","traceIndexes","update","Array","isArray","_fullData","hasSrc","key","substr","length","clearAxisTypes","axLetters","gd","traces","i","trace","j","type","ax","axAttr","_name","typeAttr","layout","set","shamefullyAdjustAxisRef","payload","axesToBeGarbageCollected","forEach","axis","a","charAt","axisIdNumber","Number","slice","Object","keys","filter","startsWith","get","subplotToBeGarbageCollected","geoRegex","shamefullyAdjustGeo","geoMatch","exec","k","geo","scope","shamefullyAddTableColumns","data","header","valuessrc","cells","shamefullyAdjustSplitStyleTargetContainers","attr","endsWith","transformIndex","parseInt","split","transform","transforms","styles","dedupedGroups","includes","group","push","map","target","groupEl","value","shamefullyCreateSplitStyleProps","traceIndex","splitTraceGroup","indexOfSplitTransform","t","getProp","indexOfStyleObject","s","toString","path","p","g","shamefullyDeleteRelatedAnalysisTransforms","parentTraceDataIndex","parentUid","uid","relatedAnalysisTraceIndexes","d","some","inputUid","splice","shamefullyAdjustSizeref","size","src","DEFAULT_MAX_AREA_PX","scaleFactor","reduce","b","Math","max"],"mappings":"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","file":"shame.js","sourcesContent":["/*\n * DELETE THIS FILE. EVERYTHING NEEDS TO FIND A HOME.\n */\nimport {getFromId} from 'plotly.js/src/plots/cartesian/axis_ids';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\n\n// Temporary fix for:\n// https://github.com/plotly/react-chart-editor/issues/103\n// We should be able to remove this once the plotly.react method has\n// been integrated into react-plotly.js and released:\n// https://github.com/plotly/react-plotly.js/issues/2\nexport const shamefullyClearAxisTypes = (graphDiv, {traceIndexes, update}) => {\n  if (!Array.isArray(graphDiv._fullData)) {\n    return;\n  }\n  let hasSrc = false;\n  for (const key in update) {\n    if (key.substr(key.length - 3) === 'src') {\n      hasSrc = true;\n    }\n  }\n  if (hasSrc) {\n    clearAxisTypes(graphDiv, traceIndexes);\n  }\n};\n\nconst axLetters = ['x', 'y', 'z'];\nfunction clearAxisTypes(gd, traces) {\n  for (let i = 0; i < traces.length; i++) {\n    const trace = gd._fullData[i];\n    for (let j = 0; j < 3; j++) {\n      const type = axLetters[j];\n      const ax = getFromId(gd, trace[type + 'axis'] || type);\n\n      // Do not clear log type.\n      // Log type is never an auto result so must have been intentional.\n      // We are also skipping clearing 3D which could cause bugs with 3D.\n      if (ax && ax.type !== 'log') {\n        const axAttr = ax._name;\n        const typeAttr = axAttr + '.type';\n        nestedProperty(gd.layout, typeAttr).set(null);\n      }\n    }\n  }\n}\n\nexport const shamefullyAdjustAxisRef = (graphDiv, payload) => {\n  if (payload.axesToBeGarbageCollected) {\n    payload.axesToBeGarbageCollected.forEach(a => {\n      const axis = a.charAt(0);\n      const axisIdNumber = Number(a.slice(1));\n\n      nestedProperty(graphDiv.layout, `${axis}axis${axisIdNumber || ''}`).set(null);\n      Object.keys(graphDiv.layout)\n        .filter(key => key.startsWith(axis + 'axis'))\n        .forEach(key => {\n          if (nestedProperty(graphDiv.layout, `${key}.overlaying`).get() === a) {\n            nestedProperty(graphDiv.layout, `${key}.overlaying`).set(null);\n          }\n        });\n    });\n  }\n  if (payload.subplotToBeGarbageCollected) {\n    nestedProperty(graphDiv.layout, payload.subplotToBeGarbageCollected).set(null);\n  }\n};\n\nconst geoRegex = /^(geo\\d*)\\./;\nexport const shamefullyAdjustGeo = ({layout}, {update}) => {\n  Object.keys(update).forEach(k => {\n    const geoMatch = geoRegex.exec(k);\n    if (geoMatch) {\n      const geo = geoMatch[1];\n      if (update[geo + '.scope']) {\n        update[geo + '.projection'] = {};\n        update[geo + '.center'] = {};\n      }\n\n      if (\n        // requesting projection change\n        update[geo + '.projection.type'] &&\n        (update[geo + '.projection.type'] === 'albers usa' ||\n          (layout[geo] && layout[geo].scope === 'usa'))\n      ) {\n        update[geo + '.scope'] = {};\n        update[geo + '.center'] = {};\n      }\n    }\n  });\n};\n\nexport const shamefullyAddTableColumns = (graphDiv, {traceIndexes, update}) => {\n  if (\n    update['cells.values'] &&\n    (!graphDiv.data[traceIndexes[0]].header || !graphDiv.data[traceIndexes[0]].header.valuessrc)\n  ) {\n    update['header.values'] = update['cells.valuessrc'];\n  } else if (update['header.values'] === null) {\n    update['header.values'] = graphDiv.data[traceIndexes[0]].cells.valuessrc || null;\n  } else if (update['cells.values'] === null && !graphDiv.data[traceIndexes[0]].header.valuessrc) {\n    update['header.values'] = null;\n  }\n};\n\nexport const shamefullyAdjustSplitStyleTargetContainers = (graphDiv, {traceIndexes, update}) => {\n  for (const attr in update) {\n    if (attr && attr.startsWith('transforms') && attr.endsWith('groups')) {\n      const transformIndex = parseInt(attr.split('[')[1], 10);\n      const transform = graphDiv.data[traceIndexes[0]].transforms[transformIndex];\n\n      if (transform && transform.type === 'groupby' && transform.styles) {\n        // Create style containers for all groups\n        if (!transform.styles.length && update[attr]) {\n          const dedupedGroups = [];\n          update[attr].forEach(group => {\n            if (!dedupedGroups.includes(group)) {\n              dedupedGroups.push(group);\n            }\n          });\n\n          const styles = dedupedGroups.map(groupEl => ({\n            target: groupEl,\n            value: {},\n          }));\n\n          update[`transforms[${transformIndex}].styles`] = styles;\n        }\n\n        // When clearing the data selector of groupby transforms, we want to clear\n        // all the styles we've added\n        if (transform.styles.length && !update[attr]) {\n          update[`transforms[${transformIndex}].styles`] = [];\n        }\n      }\n    }\n  }\n};\n\nexport const shamefullyCreateSplitStyleProps = (graphDiv, attr, traceIndex, splitTraceGroup) => {\n  if (!Array.isArray(splitTraceGroup)) {\n    splitTraceGroup = [splitTraceGroup]; // eslint-disable-line\n  }\n\n  let indexOfSplitTransform = null;\n\n  graphDiv.data[traceIndex].transforms.forEach((t, i) => {\n    if (t.type === 'groupby') {\n      indexOfSplitTransform = i;\n    }\n  });\n\n  function getProp(group) {\n    let indexOfStyleObject = null;\n\n    graphDiv.data[traceIndex].transforms[indexOfSplitTransform].styles.forEach((s, i) => {\n      if (s.target.toString() === group) {\n        indexOfStyleObject = i;\n      }\n    });\n\n    let path =\n      graphDiv.data[traceIndex].transforms[indexOfSplitTransform].styles[indexOfStyleObject].value;\n\n    attr.split('.').forEach(p => {\n      if (!path[p]) {\n        path[p] = {};\n      }\n      path = path[p];\n    });\n\n    return nestedProperty(\n      graphDiv.data[traceIndex].transforms[indexOfSplitTransform].styles[indexOfStyleObject].value,\n      attr\n    );\n  }\n\n  return splitTraceGroup.map(g => getProp(g));\n};\n\nexport const shamefullyDeleteRelatedAnalysisTransforms = (graphDiv, payload) => {\n  const parentTraceDataIndex = payload.traceIndexes[0];\n  const parentUid = graphDiv.data[parentTraceDataIndex].uid;\n\n  if (parentUid) {\n    const relatedAnalysisTraceIndexes = [];\n    graphDiv.data.forEach((d, i) => {\n      if (\n        d.transforms &&\n        d.transforms.some(\n          transform =>\n            ['moving-average', 'fit'].includes(transform.type) && transform.inputUid === parentUid\n        )\n      ) {\n        relatedAnalysisTraceIndexes.push(i);\n      }\n    });\n\n    if (relatedAnalysisTraceIndexes.length) {\n      relatedAnalysisTraceIndexes.forEach(i => {\n        graphDiv.data.splice(i, 1);\n      });\n    }\n  }\n};\n\nexport const shamefullyAdjustSizeref = (gd, {update}) => {\n  const {'marker.size': size = null, 'marker.sizesrc': src = null} = update;\n  if (size && src) {\n    const DEFAULT_MAX_AREA_PX = 45;\n    const scaleFactor = DEFAULT_MAX_AREA_PX * DEFAULT_MAX_AREA_PX;\n    update['marker.sizeref'] = size.reduce((a, b) => Math.max(a, b)) / scaleFactor;\n    update['marker.sizemode'] = 'area';\n  }\n};\n"]}